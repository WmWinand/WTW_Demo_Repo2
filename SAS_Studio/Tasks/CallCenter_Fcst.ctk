<Task fetchProductLicenses="true" revision="1" schemaVersion="7.3">
    <Registration>
        <Name>Modeling and Forecasting.ctk</Name>
        <Description>Select and build forecast models on time series data.</Description>
        <GUID>49affa91-d820-470f-aecf-da34bda19814</GUID>
        <Procedures>TSMODEL CAS</Procedures>
        <Links>
            <Link href="https://documentation.sas.com/?softwareId=STUDIOBASIC&amp;softwareVersion=01&amp;softwareContextId=tasks&amp;requestor=inapp">SAS Studio Task Reference Guide</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=ANVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_tsmodel&amp;requestor=inapp">The TSMODEL Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=PGMVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_cas&amp;requestor=inapp">The CAS Procedure</Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=PGMVIYA&amp;softwareVersion=01&amp;softwareContextId=actions&amp;requestor=inapp">The runTimeCode Action(runTimeCode)</Link>
            <Link href=""> </Link>
            <Link href="http://support.sas.com/training/studio">SAS Tutorials</Link>
        </Links>
    </Registration>
    <Metadata>
        <DataSources>
            <DataSource libraryEngineInclude="CAS" name="dataset" where="true">
                <Roles>
                    <Role exclude="weightVariable,intervalInputs,nominalInputs,dependVariable,independVariable,ucmIndependVariable,byVariable1,byVariable2,byVariable3" maxVars="1" minVars="1" name="timeID" type="N">Time ID</Role>
                    <Role exclude="weightVariable,intervalInputs,nominalInputs,timeID,independVariable,ucmIndependVariable,byVariable1,byVariable2,byVariable3" maxVars="1" minVars="1" name="dependVariable" type="N">Dependent variable</Role>
                    <Role exclude="weightVariable,intervalInputs,nominalInputs,timeID,dependVariable,byVariable1,byVariable2,byVariable3" maxVars="0" minVars="1" name="independVariable" order="true" type="N">Independent variables</Role>
                    <Role exclude="weightVariable,nominalInputs,timeID,dependVariable,byVariable1,byVariable2,byVariable3" maxVars="0" minVars="0" name="intervalInputs" order="true" type="N">Interval inputs:</Role>
                    <Role exclude="weightVariable,intervalInputs,timeID,dependVariable,independVariable,ucmIndependVariable,byVariable1,byVariable2,byVariable3" maxVars="0" minVars="0" name="nominalInputs" order="true" type="N">Nominal inputs:</Role>
                    <Role exclude="weightVariable,intervalInputs,nominalInputs,dependVariable,timeID,independVariable,ucmIndependVariable,byVariable2,byVariable3" maxVars="1" minVars="0" name="byVariable1" order="true" type="A">BY variable 1:</Role>
					<Role exclude="weightVariable,intervalInputs,nominalInputs,dependVariable,timeID,independVariable,ucmIndependVariable,byVariable1,byVariable3" maxVars="1" minVars="0" name="byVariable2" order="true" type="A">BY variable 2:</Role>
					<Role exclude="weightVariable,intervalInputs,nominalInputs,dependVariable,timeID,independVariable,ucmIndependVariable,byVariable1,byVariable2" maxVars="1" minVars="0" name="byVariable3" order="true" type="A">BY variable 3:</Role>
                    <Role exclude="weightVariable,intervalInputs,nominalInputs,timeID,dependVariable,byVariable1,byVariable2,byVariable3" maxVars="0" minVars="1" name="ucmIndependVariable" order="true" type="N">Independent variables</Role>
                    <Role exclude="timeID,intervalInputs,nominalInputs,dependVariable,independVariable,ucmIndependVariable,byVariable1,byVariable2,byVariable3" indent="1" maxVars="1" minVars="1" name="weightVariable" type="N">Weight:</Role>
                </Roles>
            </DataSource>
        </DataSources>

        <Options>
            <Option inputType="string" name="dataTab">Data</Option>
            <Option inputType="string" name="dataGroup">Data</Option>
            <Option inputType="string" name="rolesGroup">Roles</Option>
            <Option inputType="string" name="addRolesGroup">Additional Roles</Option>
            <Option inputType="string" name="groupByGroup">Group Analysis</Option>

            <Option inputType="string" name="taskNoteGroup">Note</Option>
            <Option inputType="string" name="taskNote">This task requires data in a valid time series format. To prepare your data, run the Time Series Data Preparation task before starting this task.</Option>

            <!-- Time ID properties -->
            <Option inputType="string" name="timeIDPropertyGroup">Properties</Option>
			<Option inputType="timeidproperties" name="timeIDProps" source="timeID"/>
            
            <!-- Model related options -->
            <Option inputType="string" name="modelTab">Model</Option>

            <Option inputType="string" name="esmGroup">Model Settings</Option>
            <Option inputType="string" name="arimaGroup">Model Settings</Option>
            <Option inputType="string" name="ucmGroup">Model Settings</Option>
            <Option inputType="string" name="maGroup">Model Settings</Option>
            <Option inputType="string" name="rwGroup">Model Settings</Option>
            <Option inputType="string" name="nnGroup">Model Settings</Option>
            

            <!-- Model Type options -->
            <Option inputType="string" name="modelGroup">Model</Option>

            <Option inputType="combobox" name="modelTypeCombo1" required="true" selectMessage="Select a model type">Forecasting model type:</Option>
            <Option inputType="string" name="modelTypeESM" returnValue="ESM">Exponential smoothing</Option>
            <Option inputType="string" name="modelTypeARIMA" returnValue="ARIMA">ARIMA</Option>
            <Option inputType="string" name="modelTypeARIMAX" returnValue="ARIMAX">ARIMAX</Option>
            <Option inputType="string" name="modelTypeUCM" returnValue="UCM">Unobserved components</Option>
            <Option inputType="string" name="modelTypeMA" returnValue="MA">Moving average</Option>
            <Option inputType="string" name="modelTypeRW" returnValue="RW">Random walk</Option>
            <Option inputType="string" name="modelTypeCUSTOM" returnValue="CUSTOM">Custom model with Python/R</Option>
            

            <Option inputType="combobox" name="modelTypeCombo2" required="true" selectMessage="Select a model type">Forecasting model type:</Option>
            <Option inputType="string" name="modelTypeESM2" returnValue="ESM">Exponential smoothing</Option>
            <Option inputType="string" name="modelTypeARIMA2" returnValue="ARIMA">ARIMA</Option>
            <Option inputType="string" name="modelTypeARIMAX2" returnValue="ARIMAX">ARIMAX</Option>
            <Option inputType="string" name="modelTypeUCM2" returnValue="UCM">Unobserved components</Option>
            <Option inputType="string" name="modelTypeMA2" returnValue="MA">Moving average</Option>
            <Option inputType="string" name="modelTypeRW2" returnValue="RW">Random walk</Option>
            <Option inputType="string" name="modelTypeCUSTOM2" returnValue="CUSTOM">Custom model with Python/R</Option>
            
            <!-- Code generation options -->
            <Option inputType="string" name="codeGenerationGroup">Code Generation</Option> 
		    <Option defaultValue="0" inputType="radio" name="procCARIMA" variable="proc">Use CARIMA Procedure</Option>
		    <Option defaultValue="0" inputType="radio" name="procCESM" variable="proc">Use CESM Procedure</Option>
		    <Option defaultValue="0" inputType="radio" name="procNNET" variable="proc">Use NNET and TSMODEL Procedures</Option>
		    <Option defaultValue="0" inputType="radio" name="procTsmodel" variable="proc">Use TSMODEL procedure</Option>
		    <Option inputType="radio" name="casAction" variable="proc">Use CAS procedure</Option>

            <!-- Exponential smoothing models options -->
            <Option defaultValue="simple" inputType="combobox" name="esmModelCombo">Forecasting model:</Option>
            <Option inputType="string" name="esmModelSIMPLE" returnValue="simple">Simple (single) exponential smoothing</Option>
            <Option inputType="string" name="esmModelDOUBLE" returnValue="double">(-)Double (Brown) exponential smoothing</Option>
            <Option inputType="string" name="esmModelLINEAR" returnValue="linear">Linear (Holt) exponential smoothing</Option>
            <Option inputType="string" name="esmModelDAMPTREND" returnValue="damptrend">Damped trend exponential smoothing</Option>
            <Option inputType="string" name="esmModelADDSEASONAL" returnValue="seasonal">Additive seasonal exponential smoothing</Option>
            <Option inputType="string" name="esmModelMULTSEASONAL" returnValue="multseasonal">Multiplicative seasonal exponential smoothing</Option>
            <Option inputType="string" name="esmModelWINTERS" returnValue="winters">Winters multiplicative model</Option>
            <Option inputType="string" name="esmModelADDWINTERS" returnValue="addwinters">Winters additive method</Option>
            <Option inputType="string" name="esmModelBESTN" returnValue="bestn">(+)BESTN</Option>
            <Option inputType="string" name="esmModelBESTS" returnValue="bests">(+)BESTS</Option>
            <Option inputType="string" name="esmModelBEST" returnValue="best">(+)BEST</Option>
            
            <Option defaultValue="esmTransformNONE" inputType="combobox" name="esmTransformCombo">Transformation:</Option>
            <Option inputType="string" name="esmTransformNONE" returnValue="none">No transformation</Option>
            <Option inputType="string" name="esmTransformLOG" returnValue="log">Logarithmic transformation</Option>
            <Option inputType="string" name="esmTransformSQRT" returnValue="sqrt">Square-root transformation</Option>
            <Option inputType="string" name="esmTransformLOGGISTIC" returnValue="logistic">Logistic transformation</Option>
            <Option inputType="string" name="esmTransformBOXCOX" returnValue="boxcox">Box-Cox transformation</Option>
            <Option defaultValue="0" hintMessage="0" indent="1" inputType="numbertext" invalidMessage="Enter a number between -5 and 5." maxValue="5" minValue="-5" missingMessage="Enter a number between -5 and 5." name="boxCoxParam" rangeMessage="Enter a number between -5 and 5." required="true">Box-Cox transformation parameter:</Option>

            <Option defaultValue="mean" inputType="combobox" name="esmForecastTypeCombo">Forecast type:</Option>
            <Option inputType="string" name="esmForecastTypeMEAN" returnValue="mean">Mean forecasts</Option>
            <Option inputType="string" name="esmForecastTypeMEDIAN" returnValue="median">Median forecasts</Option>

            <!-- ARIMA related options -->
            <Option inputType="string" name="arimaSettingsGroup">ARIMA</Option>
            <Option decimalPlaces="0" defaultValue="0" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 14." maxValue="13" minValue="0" name="arimaP" promptMessage="Enter an integer greater than or equal to 0 and less than 14." rangeMessage="Enter an integer greater than or equal to 0 and less than 14." width="5em">Autoregressive order (p):</Option>
            <Option decimalPlaces="0" defaultValue="0" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 14." maxValue="13" minValue="0" name="arimaD" promptMessage="Enter an integer greater than or equal to 0 and less than 14." rangeMessage="Enter an integer greater than or equal to 0 and less than 14." width="5em">Differencing order (d):</Option>
            <Option decimalPlaces="0" defaultValue="0" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 14." maxValue="13" minValue="0" name="arimaQ" promptMessage="Enter an integer greater than or equal to 0 and less than 14." rangeMessage="Enter an integer greater than or equal to 0 and less than 14." width="5em">Moving average order (q):</Option>
            <Option inputType="string" name="seasonalArimaSettingsGroup">Seasonal ARIMA</Option>
            <Option decimalPlaces="0" defaultValue="0" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 6." maxValue="5" minValue="0" name="arimaPP" promptMessage="Enter an integer greater than or equal to 0 and less than 6." rangeMessage="Enter an integer greater than or equal to 0 and less than 6." width="5em">Autoregressive order (P):</Option>
            <Option decimalPlaces="0" defaultValue="0" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 4." maxValue="3" minValue="0" name="arimaDD" promptMessage="Enter an integer greater than or equal to 0 and less than 4." rangeMessage="Enter an integer greater than or equal to 0 and less than 4." width="5em">Differencing order (D):</Option>
            <Option decimalPlaces="0" defaultValue="0" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 6." maxValue="5" minValue="0" name="arimaQQ" promptMessage="Enter an integer greater than or equal to 0 and less than 6." rangeMessage="Enter an integer greater than or equal to 0 and less than 6." width="5em">Moving average order (Q):</Option>
            <Option inputType="string" name="arimaxGroup">Independent Variables</Option>

            <Option defaultValue="1" inputType="checkbox" name="Intercept">Include intercept in model</Option>

            <!-- UCM related options -->
            <Option inputType="string" name="ucmRegressionGroup">Regression Effects</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmIndependVar">Include independent variables</Option>

            <Option inputType="string" name="ucmIrregularCompGroup">Irregular Component</Option>
            <Option defaultValue="1" inputType="checkbox" name="ucmIrregular">Include an irregular component</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmIrregularVariance">Specify variance</Option>
            <Option defaultValue="0" hintMessage="0" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than or equal to 0." minValue="0" missingMessage="Enter a number greater than or equal to 0." name="ucmIrregularInitialVariance" rangeMessage="Enter a number greater than or equal to 0." required="true">Initial variance:</Option>
            <Option defaultValue="0" indent="2" inputType="checkbox" name="ucmIrregularNoest">Fix variance value</Option>

            <Option inputType="string" name="ucmTrendCompGroup">Trend Component</Option>
            <Option defaultValue="1" inputType="checkbox" name="ucmLevel">Include a level component</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmLevelVariance">Specify variance</Option>
            <Option defaultValue="0" hintMessage="0" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than or equal to 0." minValue="0" missingMessage="Enter a number greater than or equal to 0." name="ucmLevelInitialVariance" rangeMessage="Enter a number greater than or equal to 0." required="true">Initial variance:</Option>
            <Option defaultValue="0" indent="2" inputType="checkbox" name="ucmLevelNoest">Fix variance value</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmLevelCheckBreaks">Check for level breaks</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmSlope">Include a slope component</Option>
            <Option defaultValue="0" indent="2" inputType="checkbox" name="ucmSlopeVariance">Specify variance</Option>
            <Option defaultValue="0" hintMessage="0" indent="3" inputType="numbertext" invalidMessage="Enter a number greater than or equal to 0." minValue="0" missingMessage="Enter a number greater than or equal to 0." name="ucmSlopeInitialVariance" rangeMessage="Enter a number greater than or equal to 0." required="true">Initial variance:</Option>
            <Option defaultValue="0" indent="3" inputType="checkbox" name="ucmSlopeNoest">Fix variance value</Option>

            <Option inputType="string" name="ucmSeasonalCompGroup">Seasonal Component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmSeasonal">Include a seasonal component</Option>
            <Option indent="1" inputType="string" name="ucmSeasonalNote">Note: Seasonal component can be added when season length is greater than one.</Option>
            <Option defaultValue="ucmDummy" indent="1" inputType="combobox" name="ucmSeasonalType">Type:</Option>
                <Option inputType="string" name="ucmDummy" returnValue="dummy">Dummy</Option>
                <Option inputType="string" name="ucmTrig" returnValue="trig">Trigonometric</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmSeasonalVariance">Specify variance</Option>
            <Option defaultValue="0" hintMessage="0" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than or equal to 0." minValue="0" missingMessage="Enter a number greater than or equal to 0." name="ucmSeasonalInitialVariance" rangeMessage="Enter a number greater than or equal to 0." required="true">Initial variance:</Option>
            <Option defaultValue="0" indent="2" inputType="checkbox" name="ucmSeasonalNoest">Fix variance value</Option>
            
            <Option inputType="string" name="ucmCycleCompGroup">Cycle Component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmCycle">Include a cycle component</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmCyclePeriod">Specify cycle period</Option>
            <Option decimalPlaces="0" defaultValue="3" increment="1" indent="2" inputType="numstepper" invalidMessage="Enter an integer greater than 2." minValue="3" missingMessage="Enter an integer greater than 2." name="ucmCycleInitialPeriod" rangeMessage="Enter an integer greater than 2." required="true">Initial cycle period:</Option>
            <Option defaultValue="0" indent="2" inputType="checkbox" name="ucmCyclePeriodNoest">Fix period value</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmCycleDamping">Specify damping factor</Option>
            <Option defaultValue="0.01" hintMessage="0.01" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than 0 and less than or equal to 1." maxValue="1" minValue="0.00000000000000000000000001" missingMessage="Enter a number greater than 0 and less than or equal to 1." name="ucmCycleInitialDamping" rangeMessage="Enter a number greater than 0 and less than or equal to 1." required="true">Initial damping factor:</Option>
            <Option defaultValue="0" indent="2" inputType="checkbox" name="ucmCycleDampingNoest">Fix damping value</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ucmCycleVariance">Specify variance</Option>
            <Option defaultValue="0" hintMessage="0" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than or equal to 0." minValue="0" missingMessage="Enter a number greater than or equal to 0." name="ucmCycleInitialVariance" rangeMessage="Enter a number greater than or equal to 0." required="true">Initial variance:</Option>
            <Option defaultValue="0" indent="2" inputType="checkbox" name="ucmCycleVarianceNoest">Fix variance value</Option>

            <!-- UCM plots -->
            <Option inputType="string" name="ucmPlotsGroup">Plots</Option>
            <Option defaultValue="ucmDefaultPlots" inputType="combobox" name="ucmSelectPlotsCombo">Select plots to display:</Option>
            <Option inputType="string" name="ucmDefaultPlots">Default plots</Option>
            <Option inputType="string" name="ucmSelectedPlots">Selected plots</Option>
            <Option inputType="string" name="ucmAllPlots">All plots</Option>
            <Option inputType="string" name="ucmNoPlots">No plots</Option>
            <Option indent="1" inputType="string" name="ucmResidualPlotsGroup">Residuals Plots</Option>
            <Option defaultValue="1" inputType="checkbox" name="ucmResidualPanel">Diagnostics panel</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualAcfPlot">Autocorrelation function</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualPacfPlot">Partial autocorrelation function</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualHistogram">Residuals histogram</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualQQ">Normal quantile</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualNeedle">Residuals needle plot</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualModel">One-step-ahead forecasts</Option>
            <Option defaultValue="1" inputType="checkbox" name="ucmResidualLoess">Scatter plot of residuals with an overlaid loess-fit</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmWnPlot">White noise probability test (log scale)</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualCusum">Cumulative residuals against time</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmResidualCusumsq">Cumulative squared residuals against time</Option>
            <Option indent="1" inputType="string" name="ucmSmoothCompPlotsGroup">Smoothed Component Estimates</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmSmoothIrregular">Irregular component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmSmoothLevel">Level component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmSmoothSlope">Slope component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmSmoothSeason">Season component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmSmoothCycle">Cycle component</Option>
            <Option indent="1" inputType="string" name="ucmFilterCompPlotsGroup">Filtered Component Estimates</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmFilterLevel">Level component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmFilterSlope">Slope component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmFilterSeason">Season component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmFilterCycle">Cycle component</Option>
            <Option indent="1" inputType="string" name="ucmDecompFcstGroup">Series Decomposition and Forecast Plots</Option>
            <Option defaultValue="1" inputType="checkbox" name="ucmForecastPlot">Series forecasts</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmDecompPlot">Smoothed component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmDecompVarPlot">Variance of smoothed component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmFDecompPlot">Filtered component</Option>
            <Option defaultValue="0" inputType="checkbox" name="ucmFDecompVarPlot">Variance of filtered component</Option>
            
            <!-- Moving average model options -->
            <Option decimalPlaces="0" defaultValue="1" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than 0 and less than 14." maxValue="13" minValue="1" name="maP" promptMessage="Enter an integer greater than 0 and less than 14." rangeMessage="Enter an integer greater than 0 and less than 14." width="5em">Window(periods):</Option>

            <!-- Random walk model options -->
            <Option defaultValue="0" inputType="checkbox" name="drift">Drift</Option>
            <Option defaultValue="0" inputType="checkbox" name="trend">Trend</Option>
            <Option defaultValue="0" inputType="checkbox" name="seasonal">Seasonal</Option>
            
            <!-- Custom model options -->
            <Option inputType="string" name="customGroup">Model Settings</Option>
            <Option inputType="string" name="customModelNote">Click "Edit" button in the "CODE" window, then edit the custom code in the new program tab.</Option>
            <Option inputType="string" name="customLangGroup">Language</Option>
            <Option defaultValue="1" inputType="radio" name="Python" variable="customLang">Python</Option>
            <Option inputType="inputtext" name="pyPath" required="false">Python installation path</Option>
            <Option inputType="radio" name="R" variable="customLang">R</Option>
            <Option inputType="inputtext" name="rPath" required="false">R installation path</Option>
            
            <!-- Forecast related options -->
            <Option inputType="string" name="optionsTab">Options</Option>
            <Option inputType="string" name="forecastSettingsGroup">Forecast Settings</Option>
            <Option decimalPlaces="0" defaultValue="12" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 32768." maxValue="32767" minValue="0" name="forecastPeriods" promptMessage="Enter an integer greater than or equal to 0 and less than 32768." rangeMessage="Enter an integer greater than or equal to 0 and less than 32768." width="5em">Number of periods to forecast:</Option>
            <Option defaultValue="forecastConfLevelDefaultChoice" inputType="combobox" name="forecastConfLevelCombo">Forecast confidence level:</Option>
            <Option inputType="string" name="forecastConfLevelDefaultChoice">95%</Option>
            <Option inputType="string" name="forecastConfLevel99Choice">99%</Option>
            <Option inputType="string" name="forecastConfLevel90Choice">90%</Option>
            <Option inputType="string" name="forecastConfLevelCustomChoice">Use custom value</Option>
            <Option defaultValue="95" hintMessage="95" indent="1" inputType="numbertext" invalidMessage="Enter a number greater than 0 and less than 100." maxValue="99.99999999999999" minValue="0.000000000000000000000001" missingMessage="Enter a number greater than 0 and less than 100." name="forecastConfLevel" rangeMessage="Enter a number greater than 0 and less than 100." required="true">Custom confidence level (%):</Option>
            <Option decimalPlaces="0" defaultValue="0" increment="1" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0 and less than 32768." maxValue="32767" minValue="0" name="forecastHoldback" promptMessage="Enter an integer greater than or equal to 0 and less than 32768." rangeMessage="Enter an integer greater than or equal to 0 and less than 32768." width="5em">Number of periods to hold back:</Option>

            <!-- Outlier detection -->
            <Option inputType="string" name="outlierGroup">OUTLIER DETECTION</Option>
            <Option defaultValue="1" inputType="checkbox" name="outlierDetection">Perform outlier detection</Option>
            
			<Option defaultValue="" inputType="combobox" name="criterionCombo">Model selection criterion:</Option>
			<Option inputType="string" name="criterionSSE" returnValue="SSE">Sum of square error</Option>
			<Option inputType="string" name="criterionMSE" returnValue="MSE">Mean squared error</Option>
			<Option inputType="string" name="criterionRMSE" returnValue="RMSE">Root mean squared error</Option>
			<Option inputType="string" name="criterionUMSE" returnValue="UMSE">Unbiased mean squared error</Option>
            

            <!-- Output related options -->
            <Option inputType="string" name="outputTab">Output</Option>
            <Option inputType="string" name="outputGroup">Output Data</Option>
            
			<Option inputType="string" name="casOutputLibrefNote">The following tables must use a CAS engine libref.</Option>

            <Option defaultValue="0" inputType="checkbox" name="outputDS">Create output table</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputDSName" required="true" unique="true">Specify a CAS table:</Option>

            <Option inputType="checkbox" name="outputEST">Create parameter estimates table</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputESTName" required="true" unique="true">Specify a CAS table:</Option>

            <Option inputType="checkbox" name="outputSTAT">Create fit statistics table</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputSTATName" required="true" unique="true">Specify a CAS table:</Option>

            <Option inputType="checkbox" name="outputFOR">Create forecasted values data set</Option>
            <Option defaultValue="work.outfor" indent="1" inputType="outputdata" name="outputFORName" required="true" unique="true">Data set name:</Option>

            <Option inputType="checkbox" name="outputSUM">Create summary data set</Option>
            <Option defaultValue="work.outsum" indent="1" inputType="outputdata" name="outputSUMName" required="true" unique="true">Data set name:</Option>

            <Option inputType="checkbox" name="outputCOV">Create covariances and correlations data set</Option>
            <Option defaultValue="work.outcov" indent="1" inputType="outputdata" name="outputCOVName" required="true" unique="true">Data set name:</Option>

            <Option inputType="checkbox" name="outputMODEL">Create model information data set</Option>
            <Option defaultValue="work.outmodel" indent="1" inputType="outputdata" name="outputMODELName" required="true" unique="true">Data set name:</Option>
            
            <Option indent="1" inputType="string" name="esmOutputNote">The output table includes forecast and actual values.</Option>
            <Option indent="1" inputType="string" name="arimaOutputNote">The output table includes forecast and actual values and confidence limits.</Option>

            <!-- ARIMA plots -->
            <Option inputType="string" name="arimaPlotsGroup">Plots</Option>
            <Option defaultValue="arimaDefaultPlots" inputType="combobox" name="arimaSelectPlotsCombo">Select plots to display:</Option>
            <Option inputType="string" name="arimaDefaultPlots">Default plots</Option>
            <Option inputType="string" name="arimaSelectedPlots">Selected plots</Option>
            <Option inputType="string" name="arimaAllPlots">All plots</Option>
            <Option inputType="string" name="arimaNoPlots">No plots</Option>

            <Option indent="1" inputType="string" name="arimaSeriesPlotsGroup">Series Plots</Option>
            <Option indent="1" inputType="string" name="arimaResidualPlotsGroup">Residual Plots</Option>
            <Option indent="1" inputType="string" name="arimaForecastPlotsGroup">Forecast Plots</Option>

            <Option defaultValue="0" inputType="checkbox" name="plotArimaSeriesACF">Autocorrelations plot</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotArimaSeriesCORR">Panels of correlation plots</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotArimaSeriesCROSSCORR">Panels of cross-correlation plots</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaSeriesIACF">Inverse-autocorrelations plot</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaSeriesPACF">Partial-autocorrelations plot</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaResidualACF">Residual autocorrelations plot</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotArimaResidualCORR">Panel of the residual correlation diagnostics</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaResidualHIST">Histogram of the residuals</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaResidualIACF">Residual inverse-autocorrelations plot</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotArimaResidualNORMAL">Panel of the residual normality diagnostics</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaResidualPACF">Residual partial-autocorrelations</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaResidualQQ">Normal quantile plot of the residuals</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaResidualSMOOTH">Scatter plot of the residuals against time</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaResidualWN">Ljung-Box white-noise test p-values at different lags</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotArimaForecastFORECAST">One-step-ahead and multistep-ahead forecasts</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotArimaForecastFORECASTONLY">Multistep-ahead forecasts in the forecast region</Option>

            <!-- ESM plots -->
            <Option inputType="string" name="esmPlotsGroup">Plots</Option>
            <Option defaultValue="esmDefaultPlots" inputType="combobox" name="esmSelectPlotsCombo">Select plots to display:</Option>
            <Option inputType="string" name="esmDefaultPlots">Default plots</Option>
            <Option inputType="string" name="esmSelectedPlots">Selected plots</Option>
            <Option inputType="string" name="esmAllPlots">All plots</Option>
            <Option inputType="string" name="esmNoPlots">No plots</Option>

            <Option indent="1" inputType="string" name="esmModelPlotsGroup">Model Plots</Option>
            <Option indent="1" inputType="string" name="esmErrorPlotsGroup">Error Plots</Option>
            <Option indent="1" inputType="string" name="esmForecastPlotsGroup">Forecast Plots</Option>

            <Option defaultValue="0" inputType="checkbox" name="plotESMModelMODELS">Model graphics</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMModelLEVELS">Smoothed level component</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMModelSEASONS">Smoothed seasonal component</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMModelTRENDS">Smoothed trend (slope) component</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMErrorACF">Prediction error autocorrelation function plot</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotESMErrorCORR">Prediction error correlation graphics panel</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotESMErrorERRORS">Prediction error time series</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMErrorIACF">Prediction error inverse autocorrelation function</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMErrorPACF">Prediction error partial autocorrelation function</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMErrorPERIODGRAM">Prediction error periodogram</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMErrorSPECTRUM">Periodogram and smoothed periodogram of prediction error series</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMErrorWN">White noise graphics</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMForecastFORECASTS">Forecast</Option>
            <Option defaultValue="0" inputType="checkbox" name="plotESMForecastFORECASTSONLY">Forecast in the forecast horizon only</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotESMForecastMODELFORECASTS">One-step ahead model forecast and its confidence bands</Option>

            <!-- Forecast plots -->
            <Option inputType="string" name="viyaPlotsGroup">Plots</Option>
            <Option defaultValue="1" inputType="checkbox" name="plotForecastViya">Forecasted and actual values</Option>

            <Option indent="2" inputType="distinct" name="byVar1Level" required="true" selectMessage="Select a level" source="byVariable1">Group variable 1 value:</Option>
            <Option indent="2" inputType="distinct" name="byVar2Level" required="true" selectMessage="Select a level" source="byVariable2">Group variable 2 value:</Option>
            <Option indent="2" inputType="distinct" name="byVar3Level" required="true" selectMessage="Select a level" source="byVariable3">Group variable 3 value:</Option>

            <!-- Code Comments and Plot Labels -->
            <Option inputType="string" name="ForecatChartLabel">Predicted and actual values of {1}</Option> 
            <Option inputType="string" name="ForecatChartXAxisLabel">{1}</Option> 
            <Option inputType="string" name="ForecatChartYAxisLabel">{1}</Option> 
            <Option inputType="string" name="actualValueLabel">Actual</Option> 
            <Option inputType="string" name="predictedValueLabel">Predicted</Option> 
            <Option inputType="string" name="predictionBandLabel">{1}% Confidence Limits</Option> 
            <Option inputType="string" name="refLineLabel">Forecast Start</Option> 
            
            <Option inputType="string" name="specifyDiffComment">Specify differencing orders</Option> 
            <Option inputType="string" name="specifyARComment">Specify AR orders. For example: p = (1)(12)</Option> 
            <Option inputType="string" name="specifyMAComment">Specify MA orders. For example: q = (1)(12)</Option> 
            <Option inputType="string" name="addTransferFuncComment">Add transfer functions for the independent variables</Option> 
            <Option inputType="string" name="setupModelComment">Setup and run the TSM model object</Option> 
            <Option inputType="string" name="outputFcastComment">Output model forecasts and estimates</Option> 
            <Option inputType="string" name="outputStatComment">Output fit statistics</Option> 
            <Option inputType="string" name="FitStatTitle">Fit statistics</Option> 
            
        <Option inputType="string" name="commentTrain">Train a Neural Network</Option> 
        <Option inputType="string" name="commentScoreDataTraining">Score training data</Option> 

        <Option inputType="string" name="temporalFeatures">Generate temporal features such as seasonal dummy variables</Option> 
        <Option inputType="string" name="seasonalDummyRoutine">Subroutine to generate seasonal dummy variables</Option> 
        <Option inputType="string" name="roleVarRoutine">Subroutine to assign value to the role variable</Option> 
        <Option inputType="string" name="dfObjComment">Define the dataFrame object</Option> 
        <Option inputType="string" name="xExtendComment">Extend the independent variables into the forecasting horizon</Option> 
        <Option inputType="string" name="atsmObjComment">Declare the ATSM objects</Option> 
        <Option inputType="string" name="roleAssignmentComment">Assign value to the roleVar: 0 - forecasting period; 1 - training period; 2- validation period; 3 - testing period.</Option> 
        <Option inputType="string" name="histSizeComment">Calculate the size of the historical series</Option> 
        </Options>
    </Metadata>

    <UI>
        <Container option="dataTab">
            <Group open="true" option="dataGroup">
                <DataItem data="dataset"/>
                <Group open="true" option="taskNoteGroup">
                    <OptionItem option="taskNote"/>
                </Group>
            </Group>
            <Group open="true" option="rolesGroup">
                <RoleItem role="dependVariable"/>
                <RoleItem role="timeID"/>
		<!--OptionItem option="timeIDProps2"/-->
                <Group open="true" option="timeIDPropertyGroup">
			<OptionChoice option="timeIDProps"/>
                </Group>
            </Group>
            <Group open="false" option="addRolesGroup">
		<Group open="true" option="groupByGroup">
			<RoleItem role="byVariable1"/>
			<RoleItem role="byVariable2"/>
			<RoleItem role="byVariable3"/>
		</Group>
                
            </Group>
        </Container>

        <Container option="modelTab">
            <Group open="true" option="modelGroup">
                <OptionChoice option="modelTypeCombo1">
                    <OptionItem option="modelTypeRW"/>
                    <OptionItem option="modelTypeMA"/>
                    <OptionItem option="modelTypeESM"/>
                    <OptionItem option="modelTypeARIMA"/>
                    <OptionItem option="modelTypeARIMAX"/>
                    <OptionItem option="modelTypeUCM"/>
                    <!--OptionItem option="modelTypeCUSTOM"/-->
				</OptionChoice>
                <OptionChoice option="modelTypeCombo2">
                    <OptionItem option="modelTypeRW2"/>
                    <OptionItem option="modelTypeMA2"/>
                    <OptionItem option="modelTypeESM2"/>
                    <OptionItem option="modelTypeARIMA2"/>
                    <OptionItem option="modelTypeARIMAX2"/>
                    <OptionItem option="modelTypeUCM2"/>
                    <!--OptionItem option="modelTypeCUSTOM2"/-->
                </OptionChoice>
                
                <Group open="true" option="esmGroup">
                    <OptionChoice option="esmModelCombo">
                        <OptionItem option="esmModelSIMPLE"/>
                        <OptionItem option="esmModelLINEAR"/>
                        <OptionItem option="esmModelDAMPTREND"/>
                        <OptionItem option="esmModelADDSEASONAL"/>
                        <OptionItem option="esmModelMULTSEASONAL"/>
                        <OptionItem option="esmModelWINTERS"/>
                        <OptionItem option="esmModelADDWINTERS"/>
                    </OptionChoice>
			<!--OptionChoice option="criterionCombo">
			    <OptionItem option="criterionSSE"/>
			    <OptionItem option="criterionMSE"/>
			    <OptionItem option="criterionRMSE"/>
			    <OptionItem option="criterionUMSE"/>
			</OptionChoice-->
                    
                    <OptionChoice option="esmTransformCombo">
                        <OptionItem option="esmTransformNONE"/>
                        <OptionItem option="esmTransformLOG"/>
                        <OptionItem option="esmTransformSQRT"/>
                        <OptionItem option="esmTransformLOGGISTIC"/>
                        <OptionItem option="esmTransformBOXCOX"/>
                    </OptionChoice>
                    <OptionItem option="boxCoxParam"/>
                    <OptionChoice option="esmForecastTypeCombo">
                        <OptionItem option="esmForecastTypeMEAN"/>
                        <OptionItem option="esmForecastTypeMEDIAN"/>
                    </OptionChoice>
                </Group>
                
                <Group open="true" option="arimaGroup">
                    <Group open="true" option="arimaSettingsGroup">
                        <OptionItem option="arimaP"/>
                        <OptionItem option="arimaD"/>
                        <OptionItem option="arimaQ"/>
                    </Group>
                    <Group open="true" option="seasonalArimaSettingsGroup">
                        <OptionItem option="arimaPP"/>
                        <OptionItem option="arimaDD"/>
                        <OptionItem option="arimaQQ"/>
                    </Group>
                    <Group open="true" option="arimaxGroup">
                        <RoleItem role="independVariable"/>
                    </Group>
                    <OptionItem option="Intercept"/>
                </Group>
                
                <Group open="true" option="ucmGroup">
                    <Group open="false" option="ucmRegressionGroup">
                        <OptionItem option="ucmIndependVar"/>
                        <RoleItem role="ucmIndependVariable"/>
                    </Group>
                    <Group open="true" option="ucmIrregularCompGroup">
                        <OptionItem option="ucmIrregular"/>
                        <OptionItem option="ucmIrregularVariance"/>
                        <OptionItem option="ucmIrregularInitialVariance"/>
                        <OptionItem option="ucmIrregularNoest"/>
                    </Group>
                    <Group open="true" option="ucmTrendCompGroup">
                        <OptionItem option="ucmLevel"/>
                        <OptionItem option="ucmLevelVariance"/>
                        <OptionItem option="ucmLevelInitialVariance"/>
                        <OptionItem option="ucmLevelNoest"/>
                        <!--OptionItem option="ucmLevelCheckBreaks"/-->
                        <OptionItem option="ucmSlope"/>
                        <OptionItem option="ucmSlopeVariance"/>
                        <OptionItem option="ucmSlopeInitialVariance"/>
                        <OptionItem option="ucmSlopeNoest"/>
                    </Group>
                    <Group open="false" option="ucmSeasonalCompGroup">
                        <OptionItem option="ucmSeasonal"/>
                        <OptionItem option="ucmSeasonalNote"/>
                        <OptionChoice option="ucmSeasonalType">
                            <OptionItem option="ucmDummy"/>
                            <OptionItem option="ucmTrig"/>
                        </OptionChoice>
                        <OptionItem option="ucmSeasonalVariance"/>
                        <OptionItem option="ucmSeasonalInitialVariance"/>
                        <OptionItem option="ucmSeasonalNoest"/>
                    </Group>
                    <Group open="false" option="ucmCycleCompGroup">
                        <OptionItem option="ucmCycle"/>
                        <OptionItem option="ucmCyclePeriod"/>
                        <OptionItem option="ucmCycleInitialPeriod"/>
                        <OptionItem option="ucmCyclePeriodNoest"/>
                        <OptionItem option="ucmCycleDamping"/>
                        <OptionItem option="ucmCycleInitialDamping"/>
                        <OptionItem option="ucmCycleDampingNoest"/>
                        <OptionItem option="ucmCycleVariance"/>
                        <OptionItem option="ucmCycleInitialVariance"/>
                        <OptionItem option="ucmCycleVarianceNoest"/>
                    </Group>
                </Group>
                
                <Group open="true" option="maGroup">
                    <OptionItem option="maP"/>
                </Group>

                <Group open="true" option="rwGroup">
                    <OptionItem option="drift"/>
                    <OptionItem option="trend"/>
                    <OptionItem option="seasonal"/>
                </Group>
                
                <Group open="true" option="customGroup">
 		        <OptionItem option="customModelNote"/>
			<Group open="true" option="customLangGroup">
			    <OptionItem option="Python"/>
			    <OptionItem option="R"/>
			    <OptionItem option="pyPath"/>
			    <OptionItem option="rPath"/>
			</Group>
                </Group>
                
                <Group open="true" option="viyaPlotsGroup">
                    <OptionItem option="plotForecastViya"/>
			<OptionItem option="byVar1Level"/>
			<OptionItem option="byVar2Level"/>
			<OptionItem option="byVar3Level"/>
                </Group>
            </Group>
        </Container>

        <Container option="optionsTab">
            <Group open="true" option="forecastSettingsGroup">
                <OptionItem option="forecastPeriods"/>
                <OptionChoice option="forecastConfLevelCombo">
                    <OptionItem option="forecastConfLevel90Choice"/>
                    <OptionItem option="forecastConfLevelDefaultChoice"/>
                    <OptionItem option="forecastConfLevel99Choice"/>
                    <OptionItem option="forecastConfLevelCustomChoice"/>
                </OptionChoice>
                <OptionItem option="forecastConfLevel"/>
                <OptionItem option="forecastHoldback"/>
            </Group>
            <!--Group option="outlierGroup" open="true">
                <OptionItem option="outlierDetection"/>
            </Group-->
            <Group open="true" option="codeGenerationGroup">
                <OptionItem option="procCARIMA"/>
                <OptionItem option="procCESM"/>
                <OptionItem option="procNNET"/>
                <OptionItem option="procTsmodel"/>
                <OptionItem option="casAction"/>
            </Group>
        </Container>

        <Container option="outputTab">
            <Group open="true" option="outputGroup">
                <OptionItem option="casOutputLibrefNote"/>
                <!-- ESM and ARIMA -->
                <OptionItem option="outputDS"/>
                <OptionItem option="esmOutputNote"/>
                <OptionItem option="arimaOutputNote"/>
                <OptionItem option="outputDSName"/>
                <!-- for all models -->
                <OptionItem option="outputEST"/>
                <OptionItem option="outputESTName"/>
                <!-- ESM and ARIMA -->
                <OptionItem option="outputSTAT"/>
                <OptionItem option="outputSTATName"/>
                <!-- ESM and UCM -->
                <!--OptionItem option="outputFOR"/-->
                <!--OptionItem option="outputFORName"/-->
                <!-- ESM -->
                <!-- OptionItem option="outputSUM"/-->
                <!-- OptionItem option="outputSUMName"/-->
                <!-- ARIMA -->
                <!-- OptionItem option="outputCOV"/-->
                <!-- OptionItem option="outputCOVName"/-->
                <!-- OptionItem option="outputMODEL"/-->
                <!-- OptionItem option="outputMODELName"/-->
            </Group>
        </Container>
    </UI>

    <Dependencies>
        <Dependency condition="$timeID.size()&gt;=1">
            <Target action="show" conditionResult="true" option="timeIDPropertyGroup"/>
            <Target action="hide" conditionResult="false" option="timeIDPropertyGroup"/>
            <!--Target option="timeIDProps" conditionResult="true" action="set" property="readOnly" value="true"/-->
            <Target action="show" conditionResult="true" option="viyaPlotsGroup"/>
            <Target action="hide" conditionResult="false" option="viyaPlotsGroup"/>
        </Dependency>
        
        <Dependency condition="($CTMUtil.isProductLicensed(1008,0,9999))">
            <Target action="hide" conditionResult="true" option="modelTypeCombo1"/>
            <Target action="show" conditionResult="false" option="modelTypeCombo1"/>
            <Target action="show" conditionResult="true" option="modelTypeCombo2"/>
            <Target action="hide" conditionResult="false" option="modelTypeCombo2"/>
        </Dependency>

        <!--Dependency condition="(($modelTypeCombo1=='ESM' || $modelTypeCombo2=='ESM') &amp;&amp; ($esmModelCombo=='bestn' || $esmModelCombo=='bests' || $esmModelCombo=='best'))">
            <Target option="criterionCombo" conditionResult="true" action="show"/>
            <Target option="criterionCombo" conditionResult="false" action="hide"/>
        </Dependency-->
        
        <Dependency condition="($modelTypeCombo1=='NN' || $modelTypeCombo2=='NN' )">
            <Target action="hide" conditionResult="true" option="forecastConfLevelCombo"/>
            <Target action="show" conditionResult="false" option="forecastConfLevelCombo"/>
        </Dependency>
        
        <Dependency condition="(($forecastConfLevelCombo=='forecastConfLevelCustomChoice'))">
            <Target action="show" conditionResult="true" option="forecastConfLevel"/>
            <Target action="hide" conditionResult="false" option="forecastConfLevel"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='ESM' || $modelTypeCombo2=='ESM' )">
            <Target action="show" conditionResult="true" option="esmGroup"/>
            <Target action="hide" conditionResult="false" option="esmGroup"/>
            <Target action="show" conditionResult="true" option="esmPlotsGroup"/>
            <Target action="hide" conditionResult="false" option="esmPlotsGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='ARIMA' || $modelTypeCombo1=='ARIMAX') ||                                 ($modelTypeCombo2=='ARIMA' || $modelTypeCombo2=='ARIMAX')">
            <Target action="show" conditionResult="true" option="arimaGroup"/>
            <Target action="hide" conditionResult="false" option="arimaGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='ARIMAX' || $modelTypeCombo2=='ARIMAX')">
            <Target action="show" conditionResult="true" option="arimaxGroup"/>
            <Target action="hide" conditionResult="false" option="arimaxGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='CUSTOM' || $modelTypeCombo2=='CUSTOM' )">
            <Target action="show" conditionResult="true" option="customGroup"/>
            <Target action="hide" conditionResult="false" option="customGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='UCM' || $modelTypeCombo2=='UCM')">
            <Target action="show" conditionResult="true" option="ucmGroup"/>
            <Target action="hide" conditionResult="false" option="ucmGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='MA' || $modelTypeCombo2=='MA')">
            <Target action="show" conditionResult="true" option="maGroup"/>
            <Target action="hide" conditionResult="false" option="maGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='RW' || $modelTypeCombo2=='RW')">
            <Target action="show" conditionResult="true" option="rwGroup"/>
            <Target action="hide" conditionResult="false" option="rwGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='NN' || $modelTypeCombo2=='NN')">
            <Target action="show" conditionResult="true" option="nnGroup"/>
            <Target action="hide" conditionResult="false" option="nnGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='UCM' || $modelTypeCombo1=='ARIMA' || $modelTypeCombo1=='ARIMAX' || $modelTypeCombo1=='MA' || $modelTypeCombo1=='RW') ||                                ($modelTypeCombo2=='UCM' || $modelTypeCombo2=='ARIMA' || $modelTypeCombo2=='ARIMAX' || $modelTypeCombo2=='MA' || $modelTypeCombo2=='RW')">
            <Target action="show" conditionResult="true" option="outlierGroup"/>
            <Target action="hide" conditionResult="false" option="outlierGroup"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='NN' || $modelTypeCombo1=='ESM' || $modelTypeCombo1=='ARIMA' || $modelTypeCombo1=='ARIMAX' || $modelTypeCombo1=='MA' || $modelTypeCombo1=='RW' || $modelTypeCombo1=='UCM') ||                                ($modelTypeCombo2=='NN' || $modelTypeCombo2=='ESM' || $modelTypeCombo2=='ARIMA' || $modelTypeCombo2=='ARIMAX' || $modelTypeCombo2=='MA' || $modelTypeCombo2=='RW' || $modelTypeCombo2=='UCM')">
            <Target action="show" conditionResult="true" option="outputDS"/>
            <Target action="hide" conditionResult="false" option="outputDS"/>
            <Target action="show" conditionResult="true" option="outputDSName"/>
            <Target action="hide" conditionResult="false" option="outputDSName"/>
        </Dependency>
        
        <Dependency condition="(($modelTypeCombo1=='ARIMA' || $modelTypeCombo1=='MA' || $modelTypeCombo1=='RW') ||                                 ($modelTypeCombo2=='ARIMA' || $modelTypeCombo2=='MA' || $modelTypeCombo2=='RW') ) &amp;&amp;                                 $CTMUtil.isProductLicensed(1523,0,9999)">
            <Target action="show" conditionResult="true" option="procCARIMA"/>
            <Target action="hide" conditionResult="false" option="procCARIMA"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='NN' || $modelTypeCombo2=='NN')">
            <Target action="show" conditionResult="true" option="procNNET"/>
            <Target action="hide" conditionResult="false" option="procNNET"/>
            <Target action="hide" conditionResult="true" option="procTsmodel"/>
            <Target action="show" conditionResult="false" option="procTsmodel"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='ESM' || $modelTypeCombo2=='ESM')">
            <Target action="show" conditionResult="true" option="esmOutputNote"/>
            <Target action="hide" conditionResult="false" option="esmOutputNote"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='ESM' || $modelTypeCombo2=='ESM') &amp;&amp; $CTMUtil.isProductLicensed(1523,0,9999)">
            <Target action="show" conditionResult="true" option="procCESM"/>
            <Target action="hide" conditionResult="false" option="procCESM"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='ARIMA' || $modelTypeCombo1=='ARIMAX' || $modelTypeCombo1=='MA' || $modelTypeCombo1=='RW') ||                                ($modelTypeCombo2=='ARIMA' || $modelTypeCombo2=='ARIMAX' || $modelTypeCombo2=='MA' || $modelTypeCombo2=='RW')">
            <Target action="show" conditionResult="true" option="arimaOutputNote"/>
            <Target action="hide" conditionResult="false" option="arimaOutputNote"/>
        </Dependency>
        <Dependency condition="($esmTransformCombo=='boxcox')">
            <Target action="show" conditionResult="true" option="boxCoxParam"/>
            <Target action="hide" conditionResult="false" option="boxCoxParam"/>
        </Dependency>

        <Dependency condition="($ucmIndependVar=='1')">
            <Target action="show" conditionResult="true" option="ucmIndependVariable"/>
            <Target action="hide" conditionResult="false" option="ucmIndependVariable"/>
        </Dependency>
        <Dependency condition="($ucmIrregular=='1')">
            <Target action="show" conditionResult="true" option="ucmIrregularVariance"/>
            <Target action="hide" conditionResult="false" option="ucmIrregularVariance"/>
        </Dependency>
        <Dependency condition="($ucmIrregularVariance=='1')">
            <Target action="show" conditionResult="true" option="ucmIrregularInitialVariance"/>
            <Target action="hide" conditionResult="false" option="ucmIrregularInitialVariance"/>
            <Target action="show" conditionResult="true" option="ucmIrregularNoest"/>
            <Target action="hide" conditionResult="false" option="ucmIrregularNoest"/>
        </Dependency>
        <Dependency condition="($ucmLevel=='1')">
            <Target action="show" conditionResult="true" option="ucmLevelVariance"/>
            <Target action="hide" conditionResult="false" option="ucmLevelVariance"/>
            <!--Target option="ucmLevelCheckBreaks" conditionResult="true" action="show"/>
            <Target option="ucmLevelCheckBreaks" conditionResult="false" action="hide"/-->
            <Target action="enable" conditionResult="true" option="ucmSlope"/>
            <Target action="disable" conditionResult="false" option="ucmSlope"/>
        </Dependency>
        <Dependency condition="($ucmLevelVariance=='1')">
            <Target action="show" conditionResult="true" option="ucmLevelInitialVariance"/>
            <Target action="hide" conditionResult="false" option="ucmLevelInitialVariance"/>
            <Target action="show" conditionResult="true" option="ucmLevelNoest"/>
            <Target action="hide" conditionResult="false" option="ucmLevelNoest"/>
        </Dependency>
        <Dependency condition="($ucmSlope=='1')">
            <Target action="show" conditionResult="true" option="ucmSlopeVariance"/>
            <Target action="hide" conditionResult="false" option="ucmSlopeVariance"/>
        </Dependency>
        <Dependency condition="($ucmSlopeVariance=='1')">
            <Target action="show" conditionResult="true" option="ucmSlopeInitialVariance"/>
            <Target action="hide" conditionResult="false" option="ucmSlopeInitialVariance"/>
            <Target action="show" conditionResult="true" option="ucmSlopeNoest"/>
            <Target action="hide" conditionResult="false" option="ucmSlopeNoest"/>
        </Dependency>
        <Dependency condition="(($modelTypeCombo1=='UCM' || $modelTypeCombo2=='UCM') &amp;&amp; ($MathTool.toInteger($timeIDProps.cycleLen)&gt;1 || $MathTool.toInteger($timeIDProps.cycleLen)&gt;1))">
            <Target action="enable" conditionResult="true" option="ucmSeasonal"/>
            <Target action="disable" conditionResult="false" option="ucmSeasonal"/>
            <Target action="hide" conditionResult="true" option="ucmSeasonalNote"/>
            <Target action="show" conditionResult="false" option="ucmSeasonalNote"/>
        </Dependency>
        <Dependency condition="($ucmSeasonal=='1')">
            <Target action="show" conditionResult="true" option="ucmSeasonalType"/>
            <Target action="hide" conditionResult="false" option="ucmSeasonalType"/>
            <Target action="show" conditionResult="true" option="ucmSeasonalVariance"/>
            <Target action="hide" conditionResult="false" option="ucmSeasonalVariance"/>
        </Dependency>
        <Dependency condition="($ucmSeasonalVariance=='1')">
            <Target action="show" conditionResult="true" option="ucmSeasonalInitialVariance"/>
            <Target action="hide" conditionResult="false" option="ucmSeasonalInitialVariance"/>
            <Target action="show" conditionResult="true" option="ucmSeasonalNoest"/>
            <Target action="hide" conditionResult="false" option="ucmSeasonalNoest"/>
        </Dependency>
        <Dependency condition="($ucmCycle=='1')">
            <Target action="show" conditionResult="true" option="ucmCyclePeriod"/>
            <Target action="hide" conditionResult="false" option="ucmCyclePeriod"/>
            <Target action="show" conditionResult="true" option="ucmCycleDamping"/>
            <Target action="hide" conditionResult="false" option="ucmCycleDamping"/>
            <Target action="show" conditionResult="true" option="ucmCycleVariance"/>
            <Target action="hide" conditionResult="false" option="ucmCycleVariance"/>
        </Dependency>
        <Dependency condition="($ucmCyclePeriod=='1')">
            <Target action="show" conditionResult="true" option="ucmCycleInitialPeriod"/>
            <Target action="hide" conditionResult="false" option="ucmCycleInitialPeriod"/>
            <Target action="show" conditionResult="true" option="ucmCyclePeriodNoest"/>
            <Target action="hide" conditionResult="false" option="ucmCyclePeriodNoest"/>
        </Dependency>
        <Dependency condition="($ucmCycleDamping=='1')">
            <Target action="show" conditionResult="true" option="ucmCycleInitialDamping"/>
            <Target action="hide" conditionResult="false" option="ucmCycleInitialDamping"/>
            <Target action="show" conditionResult="true" option="ucmCycleDampingNoest"/>
            <Target action="hide" conditionResult="false" option="ucmCycleDampingNoest"/>
        </Dependency>
        <Dependency condition="($ucmCycleVariance=='1')">
            <Target action="show" conditionResult="true" option="ucmCycleInitialVariance"/>
            <Target action="hide" conditionResult="false" option="ucmCycleInitialVariance"/>
            <Target action="show" conditionResult="true" option="ucmCycleVarianceNoest"/>
            <Target action="hide" conditionResult="false" option="ucmCycleVarianceNoest"/>
        </Dependency>
        <Dependency condition="($ucmSelectPlotsCombo=='ucmSelectedPlots')">
            <Target action="show" conditionResult="true" option="ucmResidualPlotsGroup"/>
            <Target action="hide" conditionResult="false" option="ucmResidualPlotsGroup"/>
            <Target action="show" conditionResult="true" option="ucmSmoothCompPlotsGroup"/>
            <Target action="hide" conditionResult="false" option="ucmSmoothCompPlotsGroup"/>
            <Target action="show" conditionResult="true" option="ucmFilterCompPlotsGroup"/>
            <Target action="hide" conditionResult="false" option="ucmFilterCompPlotsGroup"/>
            <Target action="show" conditionResult="true" option="ucmDecompFcstGroup"/>
            <Target action="hide" conditionResult="false" option="ucmDecompFcstGroup"/>
        </Dependency>
        <!-- Figure out how to hide group when no component is selected!!!
        <Dependency condition="($ucmSelectPlotsCombo=='ucmSelectedPlots' &amp;&amp; ($ucmIrregular=='1' || $ucmLevel=='1' || $ucmSlope=='1' || $ucmSeasonal=='1' || $ucmCycle=='1'))">
            <Target option="ucmSmoothCompPlotsGroup" conditionResult="true" action="show"/>
            <Target option="ucmSmoothCompPlotsGroup" conditionResult="false" action="hide"/>
            <Target option="ucmFilterCompPlotsGroup" conditionResult="true" action="show"/>
            <Target option="ucmFilterCompPlotsGroup" conditionResult="false" action="hide"/>
        </Dependency>  -->
        <Dependency condition="($ucmSelectPlotsCombo=='ucmSelectedPlots' &amp;&amp; $ucmIrregular=='1')">
            <Target action="show" conditionResult="true" option="ucmSmoothIrregular"/>
            <Target action="hide" conditionResult="false" option="ucmSmoothIrregular"/>
        </Dependency>
        <Dependency condition="($ucmSelectPlotsCombo=='ucmSelectedPlots' &amp;&amp; $ucmLevel=='1')">
            <Target action="show" conditionResult="true" option="ucmSmoothLevel"/>
            <Target action="hide" conditionResult="false" option="ucmSmoothLevel"/>
            <Target action="show" conditionResult="true" option="ucmFilterLevel"/>
            <Target action="hide" conditionResult="false" option="ucmFilterLevel"/>
        </Dependency>
        <Dependency condition="($ucmSelectPlotsCombo=='ucmSelectedPlots' &amp;&amp; $ucmSlope=='1')">
            <Target action="show" conditionResult="true" option="ucmSmoothSlope"/>
            <Target action="hide" conditionResult="false" option="ucmSmoothSlope"/>
            <Target action="show" conditionResult="true" option="ucmFilterSlope"/>
            <Target action="hide" conditionResult="false" option="ucmFilterSlope"/>
        </Dependency>
        <Dependency condition="($ucmSelectPlotsCombo=='ucmSelectedPlots' &amp;&amp; $ucmSeasonal=='1')">
            <Target action="show" conditionResult="true" option="ucmSmoothSeason"/>
            <Target action="hide" conditionResult="false" option="ucmSmoothSeason"/>
            <Target action="show" conditionResult="true" option="ucmFilterSeason"/>
            <Target action="hide" conditionResult="false" option="ucmFilterSeason"/>
        </Dependency>
        <Dependency condition="($ucmSelectPlotsCombo=='ucmSelectedPlots' &amp;&amp; $ucmCycle=='1')">
            <Target action="show" conditionResult="true" option="ucmSmoothCycle"/>
            <Target action="hide" conditionResult="false" option="ucmSmoothCycle"/>
            <Target action="show" conditionResult="true" option="ucmFilterCycle"/>
            <Target action="hide" conditionResult="false" option="ucmFilterCycle"/>
        </Dependency>
        
        <Dependency condition="($outputDS=='1')">
            <Target action="enable" conditionResult="true" option="outputDSName"/>
            <Target action="disable" conditionResult="false" option="outputDSName"/>
        </Dependency>
        <Dependency condition="($outputDS=='1' &amp;&amp; ($modelTypeCombo1=='ESM' || $modelTypeCombo2=='ESM'))">
            <Target action="enable" conditionResult="true" option="esmOutputNote"/>
            <Target action="disable" conditionResult="false" option="esmOutputNote"/>
        </Dependency>
        <Dependency condition="($outputDS=='1' &amp;&amp; (($modelTypeCombo1=='ARIMA' || $modelTypeCombo1=='ARIMAX' || $modelTypeCombo1=='MA' || $modelTypeCombo1=='RW') ||                                                            ($modelTypeCombo2=='ARIMA' || $modelTypeCombo2=='ARIMAX' || $modelTypeCombo2=='MA' || $modelTypeCombo2=='RW')))">
            <Target action="enable" conditionResult="true" option="arimaOutputNote"/>
            <Target action="disable" conditionResult="false" option="arimaOutputNote"/>
        </Dependency>
        <Dependency condition="($outputEST=='1')">
            <Target action="enable" conditionResult="true" option="outputESTName"/>
            <Target action="disable" conditionResult="false" option="outputESTName"/>
        </Dependency>
        <Dependency condition="($modelTypeCombo1=='NN' || $modelTypeCombo2=='NN')">
            <Target action="hide" conditionResult="true" option="outputSTAT"/>
            <Target action="show" conditionResult="false" option="outputSTAT"/>
            <Target action="hide" conditionResult="true" option="outputSTATName"/>
            <Target action="show" conditionResult="false" option="outputSTATName"/>
        </Dependency>
        <Dependency condition="($outputSTAT=='1')">
            <Target action="enable" conditionResult="true" option="outputSTATName"/>
            <Target action="disable" conditionResult="false" option="outputSTATName"/>
        </Dependency>
	<!-- 
        <Dependency condition="($outputFOR=='1')">
            <Target option="outputFORName" conditionResult="true" action="enable"/>
            <Target option="outputFORName" conditionResult="false" action="disable"/>
        </Dependency>
        <Dependency condition="($outputSUM=='1')">
            <Target option="outputSUMName" conditionResult="true" action="enable"/>
            <Target option="outputSUMName" conditionResult="false" action="disable"/>
        </Dependency>
        <Dependency condition="($outputCOV=='1')">
            <Target option="outputCOVName" conditionResult="true" action="enable"/>
            <Target option="outputCOVName" conditionResult="false" action="disable"/>
        </Dependency>
        <Dependency condition="($outputMODEL=='1')">
            <Target option="outputMODELName" conditionResult="true" action="enable"/>
            <Target option="outputMODELName" conditionResult="false" action="disable"/>
        </Dependency> 
        -->

        <Dependency condition="($modelTypeCombo1!='' || $modelTypeCombo2!='')">
            <Target action="show" conditionResult="true" option="viyaPlotsGroup"/>
            <Target action="hide" conditionResult="false" option="viyaPlotsGroup"/>
        </Dependency>
        
        <Dependency condition="$byVariable1.size()&gt;=1 &amp;&amp; $timeID.size()&gt;=1 &amp;&amp; $plotForecastViya==1">
            <Target action="show" conditionResult="true" option="byVar1Level"/>
            <Target action="hide" conditionResult="false" option="byVar1Level"/>
        </Dependency>
        <Dependency condition="$byVariable2.size()&gt;=1 &amp;&amp; $timeID.size()&gt;=1 &amp;&amp; $plotForecastViya==1">
            <Target action="show" conditionResult="true" option="byVar2Level"/>
            <Target action="hide" conditionResult="false" option="byVar2Level"/>
        </Dependency>
        <Dependency condition="$byVariable3.size()&gt;=1 &amp;&amp; $timeID.size()&gt;=1 &amp;&amp; $plotForecastViya==1">
            <Target action="show" conditionResult="true" option="byVar3Level"/>
            <Target action="hide" conditionResult="false" option="byVar3Level"/>
        </Dependency>

        <Dependency condition="$proc=='procCARIMA' || $proc=='procCESM'">
            <Target action="hide" conditionResult="true" option="forecastHoldback"/>
            <Target action="show" conditionResult="false" option="forecastHoldback"/>
        </Dependency>
        
        <Dependency condition="($customLang.equalsIgnoreCase('Python'))">
            <Target action="show" conditionResult="true" option="pyPath"/>
            <Target action="hide" conditionResult="false" option="pyPath"/>
        </Dependency>
        <Dependency condition="($customLang.equalsIgnoreCase('R'))">
            <Target action="show" conditionResult="true" option="rPath"/>
            <Target action="hide" conditionResult="false" option="rPath"/>
        </Dependency>
        
    </Dependencies>
    
    <Requirements>
	<Requirement condition="(!($timeID.size()&gt;0 &amp;&amp; $shift &gt; $multiplier))">
	    <Message>Time ID shift must be less than or equal to multiplier.</Message>
	</Requirement>
        <Requirement condition="(!($timeID.size()==0 &amp;&amp; ($esmModelCombo=='addseasonal' || $esmModelCombo=='multseasonal' || $esmModelCombo=='winters' || $esmModelCombo=='addwinters')))">
            <Message>This exponential smoothing model type requires a specified time ID variable.</Message>
        </Requirement>
        <!--Requirement condition="!($byVariable2 &amp;&amp; $byVariable2.size()>=1 &amp;&amp; (!$byVariable1) )">
            <Message nlsKey="byVariable2MsgKey.txt">BY variables must be specified in order.</Message>
        </Requirement>
        <Requirement condition="!($byVariable3 &amp;&amp; $byVariable3.size()>=1 &amp;&amp; (!$byVariable2 || !$byVariable1 ))">
            <Message nlsKey="byVariable2MsgKey.txt">BY variables must be specified in order.</Message>
        </Requirement-->
        <Requirement condition="(!($sunday==1 &amp;&amp; $monday==1 &amp;&amp;  $tuesday==1 &amp;&amp;  $wednesday==1 &amp;&amp;  $thursday==1 &amp;&amp;  $friday==1 &amp;&amp;  $saturday==1))">
            <Message>At most six week days can be defined as weekend days.</Message>
        </Requirement>
    </Requirements>
    
    <CodeTemplate><![CDATA[
ods noproctitle;
ods graphics / imagemap=on;

#if($CTMUtil.isProductLicensed(1008,0,9999))
   #set($modelTypeCombo = $modelTypeCombo2)
#else
   #set($modelTypeCombo = $modelTypeCombo1)
#end

## Calculate alpha from confidence level
#if ($forecastConfLevelCombo=="forecastConfLevelDefaultChoice") #set($alpha=0.05) #elseif($forecastConfLevelCombo=="forecastConfLevel99Choice") #set($alpha=0.01) 
    #elseif($forecastConfLevelCombo=="forecastConfLevel90Choice") #set($alpha=0.10) #else #set($alpha="(100-$forecastConfLevel)/100") #end
#if ($forecastConfLevelCombo=="forecastConfLevelDefaultChoice") #set($alphaPct=95) #elseif($forecastConfLevelCombo=="forecastConfLevel99Choice") #set($alphaPct=99) 
    #elseif($forecastConfLevelCombo=="forecastConfLevel90Choice") #set($alphaPct=90) #else #set($alphaPct=$forecastConfLevel) #end
    

#if($ucmResidualPanel=="1" || $ucmResidualAcfPlot=="1" || $ucmResidualPacfPlot=="1" || $ucmResidualHistogram=="1" || $ucmResidualQQ=="1" || $ucmResidualNeedle=="1" 
    || $ucmResidualModel=="1" || $ucmResidualLoess=="1" || $ucmWnPlot=="1" || $ucmResidualCusum=="1"|| $ucmResidualCusumsq=="1") #set($residualPlotSelected=1) #end
#if($ucmForecastPlot=="1" || $ucmDecompPlot=="1" || $ucmDecompVarPlot=="1" || $ucmFDecompPlot=="1" || $ucmFDecompVarPlot=="1") #set($decompFcstPlotSelected=1) #end

libname _tmpcas_ cas caslib="CASUSER";
#set ($tsSASLib = $dataset.getLibrary())
#set ($tsSASTable = $dataset.get("table"))

#set ($outputDSSASLib = $outputDSName.getLibrary())
#set ($outputDSSASTable = $outputDSName.get("table"))

#set ($outputESTSASLib = $outputESTName.getLibrary())
#set ($outputESTSASTable = $outputESTName.get("table"))

#set ($outputSTATSASLib = $outputSTATName.getLibrary())
#set ($outputSTATSASTable = $outputSTATName.get("table"))

#set ($tempCASLib = "_tmpcas_")

### By variables
#set ($byVariables = [])
#if($byVariable1.size()>=1)
   #set($_dummy=$byVariables.add("$byVariable1[0]"))
#end
#if($byVariable2.size()>=1)
   #set($_dummy=$byVariables.add("$byVariable2[0]"))
#end
#if($byVariable3.size()>=1)
   #set($_dummy=$byVariables.add("$byVariable3[0]"))
#end

### By variables types
#set ($byVariablesType = [])
#if($byVariable1.size()>=1)
   #if($byVariable1[0].get('type') == 'Numeric')
       #set($_dummy=$byVariablesType.add("Numeric"))
   #else
       #set($_dummy=$byVariablesType.add("Char"))
   #end
#end
#if($byVariable2.size()>=1)
   #if($byVariable2[0].get('type') == 'Numeric')
       #set($_dummy=$byVariablesType.add("Numeric"))
   #else
       #set($_dummy=$byVariablesType.add("Char"))
   #end
#end
#if($byVariable3.size()>=1)
   #if($byVariable3[0].get('type') == 'Numeric')
       #set($_dummy=$byVariablesType.add("Numeric"))
   #else
       #set($_dummy=$byVariablesType.add("Char"))
   #end
#end

### By variables quoted string
#set ($byVariablesQS = [])
#if($byVariable1.size()>=1)
   #set($_dummy=$byVariablesQS.add("$CTMUtil.quoteString($byVariable1[0].get('value'))"))
#end
#if($byVariable2.size()>=1)
   #set($_dummy=$byVariablesQS.add("$CTMUtil.quoteString($byVariable2[0].get('value'))"))
#end
#if($byVariable3.size()>=1)
   #set($_dummy=$byVariablesQS.add("$CTMUtil.quoteString($byVariable3[0].get('value'))"))
#end

### By variable levels
#set ($byLevels = [])
#if($byVariable1.size()>=1)
   #set($_dummy=$byLevels.add($byVar1Level))
#end
#if($byVariable2.size()>=1)
   #set($_dummy=$byLevels.add($byVar2Level))
#end
#if($byVariable3.size()>=1)
   #set($_dummy=$byLevels.add($byVar3Level))
#end

### Preprocess input data
#set($preProcessData=0)
#if ($dataset.getWhereClause() != '')
#set($preProcessData=1)
data ${tempCASLib}.preProcessedData;
    set $dataset(where=( $dataset.getWhereClause() ));
run;
#end


#if( $modelTypeCombo=='ESM')
##/****************************************************************************************/
##/* Exponential Smoothing                                                                */

#define($esmCode)
     declare object myModel(TSM);
     declare object mySpec(ESMSpec);
     rc = mySpec.open( );
     rc = mySpec.SetOption('method', '$esmModelCombo');
#if($esmTransformCombo && $esmTransformCombo != 'none') 
     rc = mySpec.SetTransform('$esmTransformCombo',#if($esmForecastTypeCombo == 'median')'median'#else'mean'#end#if($esmTransformCombo == 'boxcox'),$boxCoxParam#end);
#end
     rc = mySpec.close( );

     /* $setupModelComment */
     rc = myModel.Initialize(mySpec);
     rc = myModel.SetY($dependVariable[0]);
     #if($forecastPeriods!="")  rc = myModel.SetOption('lead',$forecastPeriods); #end 
     #if($forecastHoldback!="") rc = myModel.SetOption('back',$forecastHoldback); #end
     rc = myModel.SetOption('alpha',$alpha);

     rc = myModel.Run( );

/* $outputFcastComment */
#if($outputDSName || $plotForecastViya==1) 
     declare object outFcast(TSMFor);
     rc = outFcast.Collect(myModel);
#end     

#if($outputESTName)     
     declare object parEst(TSMPEst);
     rc = parEst.Collect(myModel);
#end     

/* $outputFcastComment */
     declare object outStat(TSMSTAT);
     rc = outStat.Collect(myModel);

#end

#if ($proc == 'procTsmodel')

proc tsmodel data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
    outobj=(
    #if($outputDSName || $plotForecastViya==1) outFcast=#if($outputDSName)$outputDSName(replace=YES) #else ${tempCASLib}.outFcastTemp(replace=YES)#end #end
    #if($outputESTName) parEst=$outputESTName(replace=YES) #end
    outStat = #if($outputSTATName)$outputSTATName(replace=YES) #else ${tempCASLib}.outStatTemp(replace=YES)#end
    )
#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end
;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName FORMAT=_DATA_ nlformat=YES;
#end

var  #foreach($item in $dependVariable) $item #end #foreach($item in $independVariable) $item #end;

#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end

require tsm;
submit;
$esmCode
endsubmit;
run;

############### PROC CESM
#elseif ($proc=='procCESM')

#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice") %let a=%sysevalf($alpha);#end

proc cesm data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
#if($esmModelCombo=="addseasonal" || $esmModelCombo=="multseasonal" || $esmModelCombo=="winters" || $esmModelCombo=="addwinters")
    #if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end
#end

        #if($outputDSName || $plotForecastViya==1) outfor=#if($outputDSName)$outputDSName #else ${tempCASLib}.outFcastTemp#end #end
        #if($outputESTName) outest=$outputESTName #end
        outstat=#if($outputSTATName)$outputSTATName #else ${tempCASLib}.outStatTemp #end
    ;
    
    #if ($byVariables.size() > 0)
        by #foreach( $item in $byVariables ) $item #end;
    #end
    
    #if ($timeID.size() > 0)
        ##  id statement
        id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName;
    #end
    
    #if ($dependVariable.size() > 0)
        #foreach( $item in $dependVariable ) forecast $item / alpha=#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice")&a#{else}$alpha#end model=$esmModelCombo
	#if($forecastHoldback && $forecastHoldback!="") back=$forecastHoldback #end #if($forecastPeriods!="") lead=$forecastPeriods #end            
        #if($esmTransformCombo && $esmTransformCombo != 'none') #if($esmTransformCombo == 'boxcox') transform=boxcox($boxCoxParam) #else transform=$esmTransformCombo #end #end
            #if($esmForecastTypeCombo == 'median') median #end;
        #end
    #end
    run;
 

################ PROC CAS
#elseif ($proc=='casAction')

proc cas;
  session %sysfunc(getlsessref($tsSASLib));
  loadactionset "timedata";

  action runTimeCode /
    table = {caslib="%sysfunc(getlcaslib(#if($preProcessData > 0)$tempCASLib #else $tsSASLib#end))", 
             name = #if($preProcessData > 0) "preProcessedData" #else "$tsSASTable" #end
             #if($byVariables.size() > 0),groupBy={#foreach($item in $byVariables) $byVariablesQS[$foreach.index]#if($foreach.count < $byVariables.size()),#end #end}#end             
            } 
    
    objOut={
       	{table=#if($outputSTATName){caslib="%sysfunc(getlcaslib($outputSTATSASLib))", name = "$outputSTATSASTable"#else
				 {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outStatTemp"#end 
					, replace="true"},objRef='outStat'}    
    #if($outputDSName || $plotForecastViya==1) ,{table=#if($outputDSName){caslib="%sysfunc(getlcaslib($outputDSSASLib))", name = "$outputDSSASTable"#else
                                                                         {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outFcastTemp"#end 
                                                , replace="true"},objRef='outFcast'}#end
    #if($outputESTName),{table={caslib="%sysfunc(getlcaslib($outputESTSASLib))", name = "$outputESTSASTable", replace="true"},objRef='parEst'}#end
    }

#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end

#if ($timeID.size() > 0)
    timeId={name=$CTMUtil.quoteString($timeID[0].get('value')), FORMAT="_DATA_"} 
    interval="$timeIDProps.intervalName"
	nlFormat=true
#end

series={
#foreach($item in $dependVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $dependVariable.size()),#end #end
#if($independVariable.size()>0),#end
#foreach($item in $independVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $independVariable.size()),#end #end
}
require={{pkg='TSM'}}

code=$CTMUtil.quoteString($esmCode);
run;
#end
    
##/****************************************************************************************/

#elseif( $modelTypeCombo=='ARIMA' || $modelTypeCombo=='ARIMAX')
##/****************************************************************************************/
##/* ARIMA or ARIMAX                                                                      */

#set($d=[])
#if($arimaD !=0 && $arimaD !="") #foreach( $item in [1..$arimaD] ) #set($_dummy=$d.add(1)) #end #end
#if($arimaDD !=0 && $arimaDD !="") #foreach( $item in [1..$arimaDD] ) #set($_dummy=$d.add($timeIDProps.cycleLen)) #end #end
## #set($_dummy=$d.add())


#define($arimaCode)
     #if($d.size()>0) array diff[$d.size()]/nosymbols; #end
     declare object myModel(TSM);
     declare object mySpec(ARIMASpec);

     rc = mySpec.Open( );

#if($d.size()>0)
/* $specifyDiffComment */
    #foreach($item in $d)
    diff[$foreach.count] = $item;
    #end
    rc = mySpec.SetDiff(diff);
#end

    #if(!(($arimaP==0 || $arimaP=="") && ($arimaPP==0 || $arimaPP==""))) 
/* $specifyARComment */ 
        #if($arimaP !=0 && $arimaP !="") 
	     array ar[$arimaP]/nosymbols;
            #foreach($item in [1..$arimaP])
	     ar[$foreach.count] = $item;
            #end 
	     rc = mySpec.AddARPoly(ar);
        #end
        #if($arimaPP !=0 && $arimaPP !="") 
	     array ars[$arimaPP]/nosymbols;
            #foreach($item in [1..$arimaPP]) 
	     ars[$foreach.count] = $item;
            #end
	     rc = mySpec.AddARPoly(ars,,1);
        #end
    #end

    #if(!(($arimaQ==0 || $arimaQ=="") && ($arimaQQ==0 || $arimaQQ==""))) 
/* $specifyMAComment */
        #if($arimaQ !=0 && $arimaQ !="") 
             array ma[$arimaQ]/nosymbols;
          #foreach($item in [1..$arimaQ]) 
	     ma[$foreach.count] = $item;
          #end 
	     rc = mySpec.AddMAPoly(ma);
        #end
        #if($arimaQQ !=0 && $arimaQQ !="") 
             array mas[$arimaQQ]/nosymbols;
            #foreach($item in [1..$arimaQQ]) 
	     mas[$foreach.count] = $item;
            #end 
	     rc = mySpec.AddMAPoly(mas,,1);
        #end
    #end

     #if($modelTypeCombo=='ARIMAX' && $independVariable.size()>0)
     /* $addTransferFuncComment */
        #foreach($item in $independVariable) 
          rc = mySpec.AddTF($CTMUtil.quoteString($item.get('value'))); 
        #end
     #end


    #if($Intercept == '0') rc = mySpec.SetOption('noint',1); #end
     rc = mySpec.SetOption('method','ML'); 
     rc = mySpec.Close( );

     /* $setupModelComment */
     rc = myModel.Initialize(mySpec);
     rc = myModel.SetY($dependVariable[0]);
     #if($modelTypeCombo=='ARIMAX' && $independVariable.size()>0)
        #foreach($item in $independVariable) 
          rc = myModel.AddX($item); 
        #end
     #end

     #if($forecastPeriods!="")  rc = myModel.SetOption('lead',$forecastPeriods); #end 
     #if($forecastHoldback && $forecastHoldback!="") rc = myModel.SetOption('back',$forecastHoldback); #end
     rc = myModel.SetOption('alpha',$alpha);
     rc = myModel.Run( );

#if($outputDSName || $plotForecastViya==1) 
     /* $outputFcastComment */
     declare object outFcast(TSMFor);
     rc = outFcast.Collect(myModel);
#end     

#if($outputESTName)     
     declare object parEst(TSMPEst);
     rc = parEst.Collect(myModel);
#end     

     declare object outStat(TSMSTAT);
     rc = outStat.Collect(myModel);

#end

####### PROC TSMODEL
#if ($proc == 'procTsmodel')

proc tsmodel data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
    outobj=(
	outStat=#if($outputSTATName)$outputSTATName(replace=YES) #else ${tempCASLib}.outStatTemp(replace=YES) #end 
    #if($outputDSName || $plotForecastViya==1) outFcast=#if($outputDSName)$outputDSName(replace=YES) #else ${tempCASLib}.outFcastTemp(replace=YES) #end #end
    #if($outputESTName) parEst=$outputESTName(replace=YES) #end
    )
#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end
;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName FORMAT=_DATA_ nlformat=YES;
#end

var  #foreach($item in $dependVariable) $item #end #foreach($item in $independVariable) $item #end;

#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end


require tsm;
submit;
$arimaCode
endsubmit;
run;

####### PROC CARIMA
#elseif ($proc=='procCARIMA')

#define ($d)#if(!(($arimaD==0 || $arimaD=="") && ($arimaDD==0 || $arimaDD=="")))(
        #if($arimaD !=0 && $arimaD !="") #foreach( $item in [1..$arimaD]  ) 1 #end #end
        #if($arimaDD !=0 && $arimaDD !="") #foreach( $item in [1..$arimaDD] ) $timeIDProps.cycleLen #end #end
        )
        #end
#end


#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice") %let a=%sysevalf($alpha);#end
proc carima data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
 outstat = #if($outputSTATName)$outputSTATName #else ${tempCASLib}.outStatTemp #end
#if($outputESTName) outest=$outputESTName #end
#if($outputDSName || $plotForecastViya==1) outfor=#if($outputDSName)$outputDSName #else ${tempCASLib}.outFcastTemp #end #end;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName;
#end


identify #foreach($item in $dependVariable) $item #end;

estimate
    #if(!(($arimaP==0 || $arimaP=="") && ($arimaPP==0 || $arimaPP==""))) p=
        #if($arimaP !=0 && $arimaP !="") (#foreach($item in [1..$arimaP]) $item #end) #end
        #if($arimaPP !=0 && $arimaPP !="") (#foreach($item in [1..$arimaPP]) #set($ps=$item*$timeIDProps.cycleLen) $ps #end) #end
    #end
    #if(!(($arimaQ==0 || $arimaQ=="") && ($arimaQQ==0 || $arimaQQ==""))) q=
        #if($arimaQ !=0 && $arimaQ !="") (#foreach($item in [1..$arimaQ]) $item #end) #end
        #if($arimaQQ !=0 && $arimaQQ !="") (#foreach($item in [1..$arimaQQ]) #set($qs=$item*$timeIDProps.cycleLen) $qs #end) #end
    #end
    
    #if($d != "")
     diff = $d
    #end

    #if($Intercept == '0') noint #end
    method=ML
;

forecast #if($forecastPeriods!="") lead=$forecastPeriods #end #if($forecastHoldback && $forecastHoldback!="") back=$forecastHoldback #end 
alpha=#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice")&a#{else}$alpha#end;

#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end
run;
quit;

####### PROC CAS
#elseif ($proc=='casAction')

proc cas;
  session %sysfunc(getlsessref($tsSASLib));
  loadactionset "timeData";

  action runTimeCode /
    table = {caslib="%sysfunc(getlcaslib(#if($preProcessData > 0)$tempCASLib #else $tsSASLib#end))", 
             name = #if($preProcessData > 0) "preProcessedData" #else "$tsSASTable" #end
             #if($byVariables.size() > 0),groupBy={#foreach($item in $byVariables) $byVariablesQS[$foreach.index]#if($foreach.count < $byVariables.size()),#end #end}#end             
             } 
    
    objOut={
    {table=#if($outputSTATName){caslib="%sysfunc(getlcaslib($outputSTATSASLib))", name = "$outputSTATSASTable"#else
                                                                             {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outStatTemp"#end
                                           , replace="true"},objRef='outStat'}
    #if($outputDSName || $plotForecastViya==1), {table=#if($outputDSName){caslib="%sysfunc(getlcaslib($outputDSSASLib))", name = "$outputDSSASTable"#else
                                                                         {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outFcastTemp"#end
                                           , replace="true"},objRef='outFcast'}#end
    #if($outputESTName),{table={caslib="%sysfunc(getlcaslib($outputESTSASLib))", name = "$outputESTSASTable", replace="true"},objRef='parEst'}#end
    }

#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end

#if ($timeID.size() > 0)
    timeId={name=$CTMUtil.quoteString($timeID[0].get('value')), FORMAT="_DATA_"} 
    interval="$timeIDProps.intervalName"
	nlFormat=true
#end

series={
#foreach($item in $dependVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $dependVariable.size()),#end #end
#if($independVariable.size()>0),#end
#foreach($item in $independVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $independVariable.size()),#end #end
}
require={{pkg='TSM'}}

code=$CTMUtil.quoteString($arimaCode);
run;

#end

##/****************************************************************************************/

#elseif($modelTypeCombo=='UCM')
##/****************************************************************************************/
##/* Unobserved Components                                                                */

#define($ucmCode)
     #if($d.size()>0) array diff[$d.size()]/nosymbols; #end
     array ar[1]/nosymbols;
     array ma[1]/nosymbols;

     declare object myModel(TSM);
     declare object mySpec(UCMSpec);

     rc = mySpec.Open( );
     #if($ucmIndependVariable.size()>0)
        #foreach($item in $ucmIndependVariable) 
          rc = mySpec.AddInput($CTMUtil.quoteString($item)); 
        #end
     #end

#if($ucmIrregular=="1")
    rc = mySpec.AddComponent('irregular'#if($ucmIrregularVariance=="1"), $ucmIrregularInitialVariance#end#if($ucmIrregularNoest=="1"), 1#end);
#end

#if($ucmLevel=="1")
    rc = mySpec.AddComponent('level'#if($ucmLevelVariance=="1"),$ucmLevelInitialVariance#end#if($ucmLevelNoest=="1"), 1#end);
#end
#if($ucmSlope=="1")
    rc = mySpec.AddComponent('slope'#if($ucmSlopeVariance=="1"),$ucmSlopeInitialVariance#end#if($ucmSlopeNoest=="1"),1#end);
#end
#if($ucmSeasonal=="1")
    rc = mySpec.AddSeason($timeIDProps.cycleLen, '$ucmSeasonalType'#if($ucmSeasonalVariance=="1"),$ucmSeasonalInitialVariance#end#if($ucmSeasonalNoest=="1"),1#end);
#end
#if($ucmCycle=="1")
    rc = mySpec.AddCycle(#if($ucmCyclePeriod=="1")$ucmCycleInitialPeriod#end, 
                    #if($ucmCyclePeriodNoest=="1") 1#end, 
                    #if($ucmCycleDamping=="1") $ucmCycleInitialDamping#end, 
                    #if($ucmCycleDampingNoest=="1") 1#end, 
                    #if($ucmCycleVariance=="1") $ucmCycleInitialVariance#else 0#end,
                    #if($ucmCycleVarianceNoest=="1") 1 #else 0#end
                    );
#end
     rc = mySpec.Close( );

     /* $setupModelComment */
     rc = myModel.Initialize(mySpec);
     rc = myModel.SetY($dependVariable[0]);
     #if($ucmIndependVariable.size()>0)
        #foreach($item in $ucmIndependVariable) 
          rc = myModel.AddX($item); 
        #end
     #end

     #if($forecastPeriods!="")  rc = myModel.SetOption('lead',$forecastPeriods); #end 
     #if($forecastHoldback && $forecastHoldback!="") rc = myModel.SetOption('back',$forecastHoldback); #end
     rc = myModel.SetOption('alpha',$alpha);
     rc = myModel.Run( );

     /* $outputFcastComment */
#if($outputDSName || $plotForecastViya==1) 
     declare object outFcast(TSMFor);
     rc = outFcast.Collect(myModel);
#end     

#if($outputESTName)     
     declare object parEst(TSMPEst);
     rc = parEst.Collect(myModel);
#end     

     declare object outStat(TSMSTAT);
     rc = outStat.Collect(myModel);
#end

####### PROC TSMODEL
#if ($proc == 'procTsmodel')

proc tsmodel data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
    outobj=(
	outStat=#if($outputSTATName)$outputSTATName(replace=YES) #else ${tempCASLib}.outStatTemp(replace=YES) #end 
    #if($outputDSName || $plotForecastViya==1) outFcast=#if($outputDSName)$outputDSName(replace=YES) #else ${tempCASLib}.outFcastTemp(replace=YES) #end #end
    #if($outputESTName) parEst=$outputESTName(replace=YES) #end
    )
#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end
;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName FORMAT=_DATA_ nlformat=YES;
#end

var  #foreach($item in $dependVariable) $item #end #foreach($item in $ucmIndependVariable) $item #end;


#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end

require tsm;
submit;
$ucmCode
endsubmit;
run;

####### PROC C*
#elseif ($proc=='procETS')


####### PROC CAS
#elseif ($proc=='casAction')

proc cas;
  session %sysfunc(getlsessref($tsSASLib));
  loadactionset "timeData";

  action runTimeCode /
    table = {caslib="%sysfunc(getlcaslib(#if($preProcessData > 0)$tempCASLib #else $tsSASLib#end))", 
             name = #if($preProcessData > 0) "preProcessedData" #else "$tsSASTable" #end
             #if($byVariables.size() > 0),groupBy={#foreach($item in $byVariables) $byVariablesQS[$foreach.index]#if($foreach.count < $byVariables.size()),#end #end}#end             
             } 
    
    objOut={
    {table=#if($outputSTATName){caslib="%sysfunc(getlcaslib($outputSTATSASLib))", name = "$outputSTATSASTable"#else
                                                                             {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outStatTemp"#end
                                           , replace="true"},objRef='outStat'}
    #if($outputDSName || $plotForecastViya==1), {table=#if($outputDSName){caslib="%sysfunc(getlcaslib($outputDSSASLib))", name = "$outputDSSASTable"#else
                                                                         {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outFcastTemp"#end
                                           , replace="true"},objRef='outFcast'}#end
    #if($outputESTName),{table={caslib="%sysfunc(getlcaslib($outputESTSASLib))", name = "$outputESTSASTable", replace="true"},objRef='parEst'}#end
    }

#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end

#if ($timeID.size() > 0)
    timeId={name=$CTMUtil.quoteString($timeID[0].get('value')), FORMAT="_DATA_"} 
    interval="$timeIDProps.intervalName"
	nlFormat=true
#end

series={
#foreach($item in $dependVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $dependVariable.size()),#end #end
#if($independVariable.size()>0),#end
#foreach($item in $ucmIndependVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $independVariable.size()),#end #end
}
require={{pkg='TSM'}}

code=$CTMUtil.quoteString($ucmCode);
run;

#end

##/****************************************************************************************/

#elseif($modelTypeCombo=='MA')
##/****************************************************************************************/
##/* Moving avearge                                                                       */

#define($maCode)
     declare object myModel(TSM);
     declare object mySpec(ARIMASpec);

     rc = mySpec.Open( );

/* $specifyMAComment */  
    #if($maP>0) 
     array ma[$maP]/nosymbols;
        #foreach($item in [1..$maP])
     ma[$foreach.count] = $item;
        #end 
     rc = mySpec.AddMAPoly(ma);
    #end

     rc = mySpec.SetOption('noint',1); 
     rc = mySpec.SetOption('method','CLS'); 
     rc = mySpec.Close( );

     /* $setupModelComment */
     rc = myModel.Initialize(mySpec);
     rc = myModel.SetY($dependVariable[0]);

     #if($forecastPeriods!="")  rc = myModel.SetOption('lead',$forecastPeriods); #end 
     #if($forecastHoldback && $forecastHoldback!="") rc = myModel.SetOption('back',$forecastHoldback); #end
     rc = myModel.SetOption('alpha',$alpha);
     rc = myModel.Run( );

     /* $outputFcastComment */
#if($outputDSName || $plotForecastViya==1) 
     declare object outFcast(TSMFor);
     rc = outFcast.Collect(myModel);
#end     

#if($outputESTName)     
     declare object parEst(TSMPEst);
     rc = parEst.Collect(myModel);
#end     

     declare object outStat(TSMSTAT);
     rc = outStat.Collect(myModel);
#end

####### PROC TSMODEL
#if ($proc == 'procTsmodel')

proc tsmodel data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
    outobj=(
	outStat=#if($outputSTATName)$outputSTATName(replace=YES) #else ${tempCASLib}.outStatTemp(replace=YES) #end 
    #if($outputDSName || $plotForecastViya==1) outFcast=#if($outputDSName)$outputDSName(replace=YES) #else ${tempCASLib}.outFcastTemp(replace=YES) #end #end
    #if($outputESTName) parEst=$outputESTName(replace=YES) #end
    )
#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end
;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName FORMAT=_DATA_ nlformat=YES;
#end

var  #foreach($item in $dependVariable) $item #end #foreach($item in $independVariable) $item #end;

#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end


require tsm;
submit;
$maCode
endsubmit;
run;

####### PROC CARIMA
#elseif ($proc=='procCARIMA')

#set($init = 1.0/$maP)
#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice") %let a=%sysevalf($alpha);#end

proc carima data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
 outstat = #if($outputSTATName)$outputSTATName #else ${tempCASLib}.outStatTemp #end
#if($outputESTName) outest=$outputESTName #end
#if($outputDSName || $plotForecastViya==1) outfor=#if($outputDSName)$outputDSName #else ${tempCASLib}.outFcastTemp #end #end;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName;
#end

identify #foreach($item in $dependVariable) $item #end;

estimate
    #if($maP>0) q= (#foreach($item in [1..$maP]) $item  #end)#end
    noint
    method=CLS
;

forecast #if($forecastPeriods!="") lead=$forecastPeriods #end #if($forecastHoldback && $forecastHoldback!="") back=$forecastHoldback #end alpha=#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice")&a#{else}$alpha#end
;
#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end
run;
quit;


####### PROC CAS
#elseif ($proc=='casAction')

proc cas;
  session %sysfunc(getlsessref($tsSASLib));
  loadactionset "timeData";

  action runTimeCode /
    table = {caslib="%sysfunc(getlcaslib(#if($preProcessData > 0)$tempCASLib #else $tsSASLib#end))", 
             name = #if($preProcessData > 0) "preProcessedData" #else "$tsSASTable" #end
             #if($byVariables.size() > 0),groupBy={#foreach($item in $byVariables) $byVariablesQS[$foreach.index]#if($foreach.count < $byVariables.size()),#end #end}#end             
             } 
    
    objOut={
    {table=#if($outputSTATName){caslib="%sysfunc(getlcaslib($outputSTATSASLib))", name = "$outputSTATSASTable"#else
                                                                             {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outStatTemp"#end
                                           , replace="true"},objRef='outStat'}
    #if($outputDSName || $plotForecastViya==1), {table=#if($outputDSName){caslib="%sysfunc(getlcaslib($outputDSSASLib))", name = "$outputDSSASTable"#else
                                                                         {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outFcastTemp"#end
                                           , replace="true"},objRef='outFcast'}#end
    #if($outputESTName),{table={caslib="%sysfunc(getlcaslib($outputESTSASLib))", name = "$outputESTSASTable", replace="true"},objRef='parEst'}#end
    }

#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end

#if ($timeID.size() > 0)
    timeId={name=$CTMUtil.quoteString($timeID[0].get('value')), FORMAT="_DATA_"} 
    interval="$timeIDProps.intervalName"
	nlFormat=true
#end

series={
#foreach($item in $dependVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $dependVariable.size()),#end #end
#if($independVariable.size()>0),#end
#foreach($item in $independVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $independVariable.size()),#end #end
}
require={{pkg='TSM'}}

code=$CTMUtil.quoteString($maCode);
run;

#end

##/****************************************************************************************/

#elseif($modelTypeCombo=='RW')
##/****************************************************************************************/
##/* Random Walk                                                                          */

#set($d=[1])
#if($trend=="1") #set($_dummy=$d.add(1)) #end 
#if($seasonal=="1") #set($_dummy=$d.add($timeIDProps.cycleLen)) #end

#define($rwCode)
     #if($d.size()>0) array diff[$d.size()]/nosymbols; #end

     declare object myModel(TSM);
     declare object mySpec(ARIMASpec);

     rc = mySpec.Open( );

/* $specifyDiffComment */
#if($d.size()>0)
    #foreach($item in $d)
    diff[$foreach.count] = $item;
    #end
    rc = mySpec.SetDiff(diff);
#end

    #if($drift=="0") rc = mySpec.SetOption('noint',1); #end
     rc = mySpec.SetOption('method','CLS'); 
     rc = mySpec.Close( );

     /* $setupModelComment */
     rc = myModel.Initialize(mySpec);
     rc = myModel.SetY($dependVariable[0]);
     #if($forecastPeriods!="")  rc = myModel.SetOption('lead',$forecastPeriods); #end 
     #if($forecastHoldback && $forecastHoldback!="") rc = myModel.SetOption('back',$forecastHoldback); #end
     rc = myModel.SetOption('alpha',$alpha);
     rc = myModel.Run( );

     /* $outputFcastComment */
#if($outputDSName || $plotForecastViya==1) 
     declare object outFcast(TSMFor);
     rc = outFcast.Collect(myModel);
#end     

#if($outputESTName)     
     declare object parEst(TSMPEst);
     rc = parEst.Collect(myModel);
#end     

     declare object outStat(TSMSTAT);
     rc = outStat.Collect(myModel);

#end

####### PROC TSMODEL
#if ($proc == 'procTsmodel')

proc tsmodel data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
    outobj=(
	outStat=#if($outputSTATName)$outputSTATName(replace=YES) #else ${tempCASLib}.outStatTemp(replace=YES) #end 
    #if($outputDSName || $plotForecastViya==1) outFcast=#if($outputDSName)$outputDSName(replace=YES) #else ${tempCASLib}.outFcastTemp(replace=YES) #end #end
    #if($outputESTName) parEst=$outputESTName(replace=YES) #end
    )
#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end
;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName FORMAT=_DATA_ nlformat=YES;
#end

var  #foreach($item in $dependVariable) $item #end #foreach($item in $independVariable) $item #end;

#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end


require tsm;
submit;
$rwCode
endsubmit;
run;

####### PROC CARIMA
#elseif ($proc=='procCARIMA')

#define ($d) (1 #if($trend=="1") 1 #end #if($seasonal=="1") $timeIDProps.cycleLen #end )
#end

#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice") %let a=%sysevalf($alpha);#end

proc carima data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
 outstat = #if($outputSTATName)$outputSTATName #else ${tempCASLib}.outStatTemp #end
#if($outputESTName) outest=$outputESTName #end
#if($outputDSName || $plotForecastViya==1) outfor=#if($outputDSName)$outputDSName #else ${tempCASLib}.outFcastTemp #end #end;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName;
#end

identify #foreach($item in $dependVariable) $item #end;

estimate
    diff=$d
    #if($drift=="0") noint #end
    method=CLS
;

forecast #if($forecastPeriods!="") lead=$forecastPeriods #end #if($forecastHoldback && $forecastHoldback!="") back=$forecastHoldback #end alpha=#if($forecastConfLevelCombo=="forecastConfLevelCustomChoice")&a#{else}$alpha#end
;
#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end
run;
quit;


####### PROC CAS
#elseif ($proc=='casAction')

proc cas;
  session %sysfunc(getlsessref($tsSASLib));
  loadactionset "timeData";

  action runTimeCode /
    table = {caslib="%sysfunc(getlcaslib(#if($preProcessData > 0)$tempCASLib #else $tsSASLib#end))", 
             name = #if($preProcessData > 0) "preProcessedData" #else "$tsSASTable" #end
             #if($byVariables.size() > 0),groupBy={#foreach($item in $byVariables) $byVariablesQS[$foreach.index]#if($foreach.count < $byVariables.size()),#end #end}#end             
             } 
    
    objOut={
    {table=#if($outputSTATName){caslib="%sysfunc(getlcaslib($outputSTATSASLib))", name = "$outputSTATSASTable"#else
                                                                             {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outStatTemp"#end
                                           , replace="true"},objRef='outStat'}
    #if($outputDSName || $plotForecastViya==1), {table=#if($outputDSName){caslib="%sysfunc(getlcaslib($outputDSSASLib))", name = "$outputDSSASTable"#else
                                                                         {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outFcastTemp"#end
                                           , replace="true"},objRef='outFcast'}#end
    #if($outputESTName),{table={caslib="%sysfunc(getlcaslib($outputESTSASLib))", name = "$outputESTSASTable", replace="true"},objRef='parEst'}#end
    }

#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end


#if ($timeID.size() > 0)
    timeId={name=$CTMUtil.quoteString($timeID[0].get('value')), FORMAT="_DATA_"} 
    interval="$timeIDProps.intervalName"
	nlFormat=true
#end

series={
#foreach($item in $dependVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $dependVariable.size()),#end #end
#if($independVariable.size()>0),#end
#foreach($item in $independVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $independVariable.size()),#end #end
}
require={{pkg='TSM'}}

code=$CTMUtil.quoteString($rwCode);
run;

#end
##/****************************************************************************************/

#elseif( $modelTypeCombo=='CUSTOM')
##/****************************************************************************************/
##/* Custom Model                                                                         */

#define($customCode)

    /* Copy input variable AIR into PYAIR */
    do i=1 to _LENGTH_;
        fcst[i] = ${dependVariable[0]}[i];
    end;

    /* Run the Python interpreter */
    declare object py(PYTHON2);
    rc = py.Initialize();
    rc = py.PushCodeLine('$dependVariable[0] *= 10');  /* Variable name is automatically uppercased */
    rc = py.AddVariable(fcst,'ALIAS','air','READONLY','FALSE');
    rc = py.Run();
#end

####### PROC TSMODEL
#if ($proc == 'procTsmodel')

proc tsmodel data=#if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
    outobj=(
	outStat=#if($outputSTATName)$outputSTATName(replace=YES) #else ${tempCASLib}.outStatTemp(replace=YES) #end 
    #if($outputDSName || $plotForecastViya==1) outFcast=#if($outputDSName)$outputDSName(replace=YES) #else ${tempCASLib}.outFcastTemp(replace=YES) #end #end
    #if($outputESTName) parEst=$outputESTName(replace=YES) #end
    )
#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end
;

#if ($timeID.size() > 0)
    id #foreach($item in $timeID) $item #end interval=$timeIDProps.intervalName FORMAT=_DATA_ nlformat=YES;
#end

var  #foreach($item in $dependVariable) $item #end #foreach($item in $independVariable) $item #end;

#if($byVariables.size() > 0)
    by #foreach($item in $byVariables) $item #end;
#end

OUTARRAY fcst;

require extlang;

submit;
$customCode
endsubmit;
run;

####### PROC CAS
#elseif ($proc=='casAction')

proc cas;
  session %sysfunc(getlsessref($tsSASLib));
  loadactionset "timeData";

  action runTimeCode /
    table = {caslib="%sysfunc(getlcaslib(#if($preProcessData > 0)$tempCASLib #else $tsSASLib#end))", 
             name = #if($preProcessData > 0) "preProcessedData" #else "$tsSASTable" #end
             #if($byVariables.size() > 0),groupBy={#foreach($item in $byVariables) $byVariablesQS[$foreach.index]#if($foreach.count < $byVariables.size()),#end #end}#end             
             } 
    
    objOut={
    {table=#if($outputSTATName){caslib="%sysfunc(getlcaslib($outputSTATSASLib))", name = "$outputSTATSASTable"#else
                                                                             {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outStatTemp"#end
                                           , replace="true"},objRef='outStat'}
    #if($outputDSName || $plotForecastViya==1), {table=#if($outputDSName){caslib="%sysfunc(getlcaslib($outputDSSASLib))", name = "$outputDSSASTable"#else
                                                                         {caslib="%sysfunc(getlcaslib($tempCASLib))", name = "outFcastTemp"#end
                                           , replace="true"},objRef='outFcast'}#end
    #if($outputESTName),{table={caslib="%sysfunc(getlcaslib($outputESTSASLib))", name = "$outputESTSASTable", replace="true"},objRef='parEst'}#end
    }

#if($timeIDProps.cycleLen!="" && $timeIDProps.cycleLen!="1") seasonality=$timeIDProps.cycleLen #end

#if ($timeID.size() > 0)
    timeId={name=$CTMUtil.quoteString($timeID[0].get('value')), FORMAT="_DATA_"} 
    interval="$timeIDProps.intervalName"
	nlFormat=true
#end

series={
#foreach($item in $dependVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $dependVariable.size()),#end #end
#if($independVariable.size()>0),#end
#foreach($item in $independVariable) $CTMUtil.quoteString($item.get('value'))#if($foreach.count < $independVariable.size()),#end #end
}
require={{pkg='TSM'}}

code=$CTMUtil.quoteString($maCode);
run;

#end




























Custom code goes here...

##/****************************************************************************************/
#end

#if($modelTypeCombo!='NN')
## Fit Statistic print out
proc print data=#if($outputSTATName)$outputSTATName #else ${tempCASLib}.outStatTemp#end label
contents=$CTMUtil.doubleQuoteString($FitStatTitle);
    title $CTMUtil.quoteString($FitStatTitle);
run;
#end

## Forecast Plot
#if($plotForecastViya == 1 && $timeID.size() > 0)

#if($modelTypeCombo=='NN')
data #if($outputDSName)$outputDSName#{else}${tempCASLib}.outFcastTemp#end (drop=$dependVariable[0].get('value')  P_$dependVariable[0].get('value'));
    set #if($outputDSName)$outputDSName#{else}${tempCASLib}.outFcastTemp#end;
    _NAME_ = $CTMUtil.quoteString($dependVariable[0].get('value'));
    ACTUAL = $dependVariable[0];
    PREDICT = P_$dependVariable[0]; 
    LOWER = .;
    UPPER = .;
run;    
#end

ods exclude all;
proc sql;
 select max($timeID[0]) into :maxTimeID 
   from #if($preProcessData > 0) ${tempCASLib}.preProcessedData #else $dataset #end
 ;
quit;
ods exclude none;  

#set( $ForecatChartLabel1 = $ForecatChartLabel.replace("{1}", "$dependVariable[0].get('value')") )
#set( $ForecatChartXAxisLabel2 = $ForecatChartXAxisLabel.replace("{1}", "$timeID[0].get('value')") )
#set( $ForecatChartYAxisLabel2 = $ForecatChartYAxisLabel.replace("{1}", "$dependVariable[0].get('value')") )
#set( $predictionBandLabel2 = $predictionBandLabel.replace("{1}", "$alphaPct") )

proc sgplot data=#if($outputDSName)$outputDSName#{else}${tempCASLib}.outFcastTemp#end
   #if($byVariables.size()>0) (where=(
       #foreach($byVar in $byVariables)
           $byVar = #if($byVariablesType[$foreach.index]=='Numeric') $byLevels[$foreach.index] #else $CTMUtil.quoteString($byLevels[$foreach.index]) #end #if($foreach.count < $byVariables.size()) AND #end
       #end
   ))
   #end
   noautolegend
   description=$CTMUtil.doubleQuoteString($ForecatChartLabel1);
  title $CTMUtil.quoteString($ForecatChartLabel1);
  #if($byVariables.size()>0) 

  #set( $title2String =
"(" + "#foreach($byVar in $byVariables)$byVar = #if($byVariablesType[$foreach.index]=='Numeric') $byLevels[$foreach.index]#else $CTMUtil.quoteString($byLevels[$foreach.index])#end#if($foreach.count < $byVariables.size()),#end
    #end" + ")"   )
  
  title2 $CTMUtil.quoteString( $title2String);
  #end

#if($timeID.size() > 0)
  xaxis label=$CTMUtil.quoteString($ForecatChartXAxisLabel2);
#end
  yaxis label=$CTMUtil.quoteString($ForecatChartYAxisLabel2);
  series  x=$timeID[0] y=ACTUAL /lineattrs=(color=black) name="actual" legendlabel="$actualValueLabel";
  series  x=$timeID[0] y=PREDICT /name="predict" legendlabel="$predictedValueLabel";
  band    x=$timeID[0] lower=LOWER upper=UPPER / transparency=0.5 name="pband" legendlabel="$predictionBandLabel2";
  refline &maxTimeID /axis=x label="$refLineLabel";
  keylegend "actual" "predict" "pband" / across=4  noborder position=TopLeft location=inside;
run;
#end

## Cleaning Up
#if( $preProcessData > 0  || ($plotForecastViya==1 && !$outputDSName) || (!$outputSTATName && $modelTypeCombo!='NN'))
proc delete data=#if($preProcessData > 0 )${tempCASLib}.preProcessedData#end 
                 #if(($plotForecastViya==1 && !$outputDSName)) ${tempCASLib}.outFcastTemp#end
		 #if(!$outputSTATName && $modelTypeCombo!='NN') ${tempCASLib}.outStatTemp #end                 
                 ; 
run;
#end

libname _tmpcas_;
]]></CodeTemplate>
<TemplateValues version="7.3">
<![CDATA[
{"dataset":{"librarytable":"CASUSER.ORIONCC"},"timeID":"json:[{\"value\":\"CNTCT_DT\",\"type\":\"Numeric\",\"length\":8,\"format\":\"DATE9.\",\"informat\":\"\",\"className\":\"RoleObject\"}]","dependVariable":"json:[{\"value\":\"CL_AMT\",\"type\":\"Numeric\",\"length\":8,\"format\":\"BEST12.\",\"informat\":\"\",\"className\":\"RoleObject\"}]","independVariable":"","byVariable1":"json:[{\"value\":\"GEO_ST_CD\",\"type\":\"Char\",\"length\":2,\"format\":\"$CHAR2.\",\"informat\":\"\",\"className\":\"RoleObject\"}]","byVariable2":"","byVariable3":"","ucmIndependVariable":"","timeIDProps":{"intervalName":"Day","multiplier":1,"shift":1,"cycleLen":7},"modelTypeCombo1":[{"value":"MA","displayValue":"Moving average","keys":["modelTypeMA","MA","Moving average"],"label":"Moving average","baseid":"{\"value\":\"MA\",\"label\":\"Moving average\"}","id":"{\"value\":\"MA\",\"label\":\"Moving average\"}1"}],"modelTypeCombo2":[],"procCARIMA":"0","proc":"casAction","procCESM":"0","procNNET":"0","procTsmodel":"0","casAction":"1","esmModelCombo":[{"value":"simple","displayValue":"Simple (single) exponential smoothing","keys":["esmModelSIMPLE","simple","Simple (single) exponential smoothing"],"label":"Simple (single) exponential smoothing","baseid":"{\"value\":\"simple\",\"label\":\"Simple (single) exponential smoothing\"}","id":"{\"value\":\"simple\",\"label\":\"Simple (single) exponential smoothing\"}1"}],"esmTransformCombo":[{"value":"none","displayValue":"No transformation","keys":["esmTransformNONE","none","No transformation"],"label":"No transformation","baseid":"{\"value\":\"none\",\"label\":\"No transformation\"}","id":"{\"value\":\"none\",\"label\":\"No transformation\"}1"}],"boxCoxParam":0,"esmForecastTypeCombo":[{"value":"mean","displayValue":"Mean forecasts","keys":["esmForecastTypeMEAN","mean","Mean forecasts"],"label":"Mean forecasts","baseid":"{\"value\":\"mean\",\"label\":\"Mean forecasts\"}","id":"{\"value\":\"mean\",\"label\":\"Mean forecasts\"}1"}],"arimaP":0,"arimaD":0,"arimaQ":0,"arimaPP":0,"arimaDD":0,"arimaQQ":0,"Intercept":"1","ucmIndependVar":"0","ucmIrregular":"1","ucmIrregularVariance":"0","ucmIrregularInitialVariance":0,"ucmIrregularNoest":"0","ucmLevel":"1","ucmLevelVariance":"0","ucmLevelInitialVariance":0,"ucmLevelNoest":"0","ucmSlope":"0","ucmSlopeVariance":"0","ucmSlopeInitialVariance":0,"ucmSlopeNoest":"0","ucmSeasonal":"0","ucmSeasonalType":[{"value":"dummy","displayValue":"Dummy","keys":["ucmDummy","dummy","Dummy"],"label":"Dummy","baseid":"{\"value\":\"dummy\",\"label\":\"Dummy\"}","id":"{\"value\":\"dummy\",\"label\":\"Dummy\"}1"}],"ucmSeasonalVariance":"0","ucmSeasonalInitialVariance":0,"ucmSeasonalNoest":"0","ucmCycle":"0","ucmCyclePeriod":"0","ucmCycleInitialPeriod":3,"ucmCyclePeriodNoest":"0","ucmCycleDamping":"0","ucmCycleInitialDamping":0.01,"ucmCycleDampingNoest":"0","ucmCycleVariance":"0","ucmCycleInitialVariance":0,"ucmCycleVarianceNoest":"0","maP":1,"drift":"0","trend":"0","seasonal":"0","Python":"1","customLang":"Python","pyPath":"","R":"0","rPath":"","forecastPeriods":12,"forecastConfLevelCombo":[{"value":"forecastConfLevelDefaultChoice","displayValue":"95%","keys":["forecastConfLevelDefaultChoice",null,"95%"],"label":"95%","baseid":"{\"value\":\"forecastConfLevelDefaultChoice\",\"label\":\"95%\"}","id":"{\"value\":\"forecastConfLevelDefaultChoice\",\"label\":\"95%\"}1"}],"forecastConfLevel":95,"forecastHoldback":0,"outputDS":"0","outputDSName":{"value":"","cbSelected":false},"outputEST":"0","outputESTName":{"value":"","cbSelected":false},"outputSTAT":"0","outputSTATName":{"value":"","cbSelected":false},"plotForecastViya":"1","byVar1Level":"CA"}
]]>
</TemplateValues>

</Task>